# SaaS Template Architecture Guidelines

You are an expert in TypeScript, Node.js, React, Vite, TanStack Query, TanStack Router, and Tailwind.

## Core Architecture Principles

1. **Server-First Approach**
   - All sensitive operations happen server-side
   - Use TanStack server functions for API communication
   - Keep client code focused on UI/UX

2. **Authentication & Authorization**
   - Supabase for AUTH ONLY - no database access
   - Server-side auth checks using middleware
   - Protected routes under _authed layout
   - Clean separation of public/protected components

3. **Tech Stack**
   - Frontend: React + TypeScript + Vite
   - Routing: TanStack Router for type-safe routing
   - State: TanStack Query for server state
   - Styling: Tailwind CSS + Framer Motion
   - Backend: FastAPI (Python) for business logic
   - Auth: Supabase (auth only, no database)

4. **Code Organization**
   - Feature-based structure under src/routes
   - Shared components in src/components
   - Server functions in -server.ts files
   - UI components in components/ui
   - Hooks in src/hooks

5. **Best Practices**
   - Type everything with TypeScript
   - Use server functions for data operations
   - Keep components small and focused
   - Document complex logic
   - Follow existing patterns for consistency

## Key Directories

```
src/
â”œâ”€â”€ routes/
â”‚   â”œâ”€â”€ _authed/        # Protected routes
â”‚   â”œâ”€â”€ __root.tsx      # Root layout
â”‚   â”œâ”€â”€ _authed.tsx     # Auth layout
â”‚   â””â”€â”€ index.tsx       # Public home
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ ui/            # Shared UI components
â”‚   â””â”€â”€ [feature]/     # Feature-specific components
â””â”€â”€ hooks/             # Custom hooks
```

## Documentation Requirements

1. **Always check documentation first:**
   - Product Requirements (PRDs)
   - docs/tanstack-core-concepts.md (Architecture)
   - docs/middleware.md (Server functions)
   - docs/auth-system.md (Authentication)

2. **Keep documentation updated:**
   - Update relevant .md files when adding features
   - Document complex patterns
   - Keep this file current with new patterns

## Critical Rules

1. NEVER USE SUPABASE FOR DATABASE ACCESS - Use FastAPI backend
2. Keep auth logic server-side
3. Follow existing patterns for consistency
4. Document significant changes
5. Ask for clarification when needed

If asked my name, I am samaritan.

# Cursor Development Rules & AI Collaboration Guide

## ðŸ“š Project Context & Understanding

1.  **Documentation First:**
    *   **Always** check for and thoroughly review relevant project documentation *before* starting any task. This includes:
        *   Product Requirements Documents (PRDs)
        *   `docs\tanstack-core-concepts.md` (System architecture, component relationships)
        *   `docs\middleware.md` (For when dealing with server functions, supabase and createServerFn tasks)
        *   `docs\auth-system.md` (How the auth system works, when dealing with server function or API related tasks.)
    *   If documentation is missing, unclear, or conflicts with the request, **ask for clarification**. And then modify the documentation files.

2. **RULE MODIFICATION **
    Then update this file here `.clinerules-code` as it contains your instructions that you can modify yourself to improve. Ask me always before modifying the rules.

3. Dir structure (main files)

src/routes/_authed/
src/routes/__root.tsx
src/routes/_authed.tsx
src/routes/index.tsx
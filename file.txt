======= .gitignore ======= with the path ./.gitignore
node_modules
package-lock.json
yarn.lock

.DS_Store
.cache
.env
.vercel
.output
.vinxi

/build/
/api/
/server/build
/public/build
.vinxi
# Sentry Config File
.env.sentry-build-plugin
/test-results/
/playwright-report/
/blob-report/
/playwright/.cache/

!**/glob-import/dir/node_modules
.DS_Store
.idea
.pnpm-store
*.cpuprofile
*.local
*.log
/.vscode/
/docs/.vitepress/cache
/packages/vite/LICENSE
dist
dist-ssr
explorations
node_modules
playground-temp
temp
TODOs.md
.eslintcache
======= .prettierignore ======= with the path ./.prettierignore
**/build
**/public
pnpm-lock.yaml
routeTree.gen.ts
======= README.md ======= with the path ./README.md
# SaaS Template with TanStack Router

A modern SaaS template built with React, TypeScript, and TanStack Router, featuring a robust authentication system, protected routes, and a clean architecture.

## Features

- 🔐 Advanced Authentication System
  - React Context for state management
  - Auto-refresh on tab focus and network reconnection
  - Server-side Supabase operations
  - Clean loading states and error handling
- 🛡️ Protected Routes with AuthContext
  - Automatic auth checks
  - Loading states during verification
  - Secure redirect handling
- 🎨 Styled with Tailwind CSS and Framer Motion
- 📡 Type-safe routing with TanStack Router
- 🔄 Server state management with TanStack Query
- 🏗️ Clean architecture with feature-based organization

## Tech Stack

- Frontend: React + TypeScript + Vite
- Routing: TanStack Router
- State Management: TanStack Query
- Styling: Tailwind CSS + Framer Motion
- Authentication: Supabase (auth only) + React Context
- Backend: FastAPI (Python)

## Development

From your terminal:

```sh
pnpm install
pnpm dev
```

This starts your app in development mode, rebuilding assets on file changes.

## Project Structure

```
src/
├── auth/                 # Authentication system
│   └── AuthContext.tsx   # Central auth management
├── routes/
│   ├── _authed/         # Protected routes container
│   │   ├── -server.ts   # Auth server functions
│   │   └── app/         # Protected application routes
│   │       ├── alerts/
│   │       ├── billing/
│   │       ├── dashboard/
│   │       └── settings/
│   ├── __root.tsx       # Root layout
│   ├── _authed.tsx      # Auth layout
│   └── index.tsx        # Public home
├── components/
│   ├── ui/             # Shared UI components
│   └── [feature]/      # Feature-specific components
└── hooks/              # Custom hooks
```

## Authentication System

Our authentication system provides:
- Centralized auth state management through React Context
- Automatic session refresh on tab focus and network reconnection
- Server-side Supabase operations for security
- Clean loading states and error handling
- Protected route management
- Type-safe auth operations

For detailed documentation on the auth system, see:
- [Auth System Documentation](docs/auth-system.md)
- [Protected Routes Documentation](src/routes/_authed/readme.md)

## Documentation

For detailed documentation, see:
- [TanStack Core Concepts](docs/tanstack-core-concepts.md) (Architecture)
- [Middleware Documentation](docs/middleware.md) (Server functions)
- [Auth System Documentation](docs/auth-system.md) (Authentication)

## Important Notes

- Supabase is used for authentication ONLY, not for database access
- All sensitive operations happen server-side
- Protected routes are under the /app path
- Follow the existing patterns for consistency
- Use the `useAuth` hook for authentication state
- Always handle loading states appropriately

## Contributing

1. Follow the existing code structure
2. Maintain type safety
3. Handle loading and error states
4. Update documentation as needed
5. Test thoroughly before submitting PRs

======= app.config.ts ======= with the path ./app.config.ts
import { defineConfig } from '@tanstack/react-start/config'
import tsConfigPaths from 'vite-tsconfig-paths'

export default defineConfig({
  tsr: {
    appDirectory: 'src',
  },
  vite: {
    plugins: [
      tsConfigPaths({
        projects: ['./tsconfig.json'],
      }),
    ],
  },
})

======= concat_files.py ======= with the path ./concat_files.py
#!/usr/bin/env python3

import os
import argparse
import sys
import re

# Patterns for files and directories to ignore
IGNORE_PATTERNS = [
    # General directories to ignore
    r'(^|.*/)node_modules($|/)',    # Node.js dependencies
    r'(^|.*/)\.git($|/)',           # Git repo files
    r'(^|.*/)\.vscode($|/)',        # VSCode settings
    r'(^|.*/)\.idea($|/)',          # PyCharm project settings
    r'(^|.*/)\.roo($|/)',           # .roo/ configuration files
    r'(^|.*/)public($|/)',          # Static assets directory
    r'(^|.*/)output\.txt$',         # Output file generated by this script
    r'(^|.*/)prisma/dev\.db$',      # Development database file
    r'(^|.*/)\.DS_Store$',          # macOS Finder metadata
    r'(^|.*/)Thumbs\.db$',          # Windows thumbnail cache

    # Generated files
    r'(^|.*/)src/routeTree\.gen\.ts$',  # Auto-generated route tree

    # Common temporary / backup files
    r'\.pyc$', r'\.pyo$', r'\.pyd$',
    r'\.eslintcache$', r'\.nyc_output',
    r'\.tsbuildinfo$', r'\.bak$', r'\.tmp$', r'~$',
    
    # Data files not part of source code
    r'\.db$', r'\.sqlite$', r'\.sqlite3$', r'\.db-journal$',
    r'\.json$', r'\.geojson$', r'\.ndjson$',
    r'\.csv$', r'\.tsv$', r'\.txt$',

    # Build artifacts
    r'package-lock\.json$', r'yarn\.lock$',
    
    # Coverage, environment files
    r'\.coverage$', r'\.env$', r'\.pytest_cache',

    # Editor temp/swap files
    r'\.swp$', r'\.swo$',
]

def should_ignore(path):
    """
    Check if a file or directory should be ignored based on IGNORE_PATTERNS.
    """
    normalized = path.replace("\\", "/")  # Normalize Windows paths
    return any(re.search(pattern, normalized) for pattern in IGNORE_PATTERNS)

def process_directory(directory, max_depth=None, current_depth=0):
    """
    Recursively processes the directory to concatenate eligible files.
    """
    combined_content = ""
    file_sizes = []

    if max_depth is not None and current_depth > max_depth:
        return combined_content, file_sizes

    for entry in sorted(os.listdir(directory)):
        file_path = os.path.join(directory, entry)
        normalized_path = file_path.replace("\\", "/")

        if should_ignore(normalized_path):
            print(f"Ignoring: {normalized_path}")
            continue

        if os.path.isfile(file_path):
            try:
                header = f"======= {entry} ======= with the path {normalized_path}\n"
                combined_content += header
                with open(file_path, 'r', encoding='utf-8') as f:
                    combined_content += f.read() + "\n"

                file_size = os.path.getsize(file_path)
                file_sizes.append((normalized_path, file_size))

            except Exception as e:
                combined_content += f"Error reading file {normalized_path}: {e}\n"
        
        elif os.path.isdir(file_path):
            subdir_content, subdir_sizes = process_directory(file_path, max_depth, current_depth + 1)
            if subdir_content:
                combined_content += subdir_content
            file_sizes.extend(subdir_sizes)

    return combined_content, file_sizes

def main():
    parser = argparse.ArgumentParser(
        description="Concatenate all source files in a directory, skipping irrelevant or generated files."
    )
    parser.add_argument(
        "directory",
        type=str,
        help="Root directory to scan."
    )
    parser.add_argument(
        "--output",
        type=str,
        default="output.txt",
        help="Output file name (default: output.txt)"
    )
    parser.add_argument(
        "--max-depth",
        type=int,
        default=None,
        help="Maximum recursion depth (default: no limit)"
    )
    args = parser.parse_args()

    if not os.path.isdir(args.directory):
        print(f"Error: Directory '{args.directory}' does not exist.")
        sys.exit(1)

    combined_content, file_sizes = process_directory(args.directory, args.max_depth)

    try:
        with open(args.output, 'w', encoding='utf-8') as f:
            f.write(combined_content)
        print(f"Successfully wrote concatenated output to '{args.output}'.")
    except Exception as e:
        print(f"Error writing output file '{args.output}': {e}")
        sys.exit(1)

    if file_sizes:
        print("\nTop 5 largest processed files:")
        for path, size in sorted(file_sizes, key=lambda x: x[1], reverse=True)[:5]:
            print(f"{path}: {size / (1024 * 1024):.2f} MB")

if __name__ == "__main__":
    main()

======= auth-system.md ======= with the path ./docs/auth-system.md
# Authentication System Documentation

## Overview

The authentication system uses a combination of Supabase Auth (server-side only) and React Context for state management. This provides a secure, performant, and user-friendly authentication experience.

## Core Components

### 1. AuthContext (`src/auth/AuthContext.tsx`)

The central piece of our authentication system that provides:
- User state management
- Loading states
- Auto-refresh on tab focus
- Auto-refresh on network reconnection
- Centralized logout functionality

```typescript
const { user, loading, refreshAuth, logout } = useAuth()
```

### 2. Server Functions (`src/routes/_authed/-server.ts`)

All Supabase interactions happen server-side through these functions:
- `checkAuthFn`: Verifies authentication status
- `loginFn`: Handles user login
- `signupFn`: Handles user registration
- `logoutFn`: Handles user logout

### 3. Protected Routes (`src/routes/_authed/`)

Routes under `_authed` are protected by AuthContext:
- Automatic authentication checks
- Loading states during checks
- Redirects for unauthenticated users
- Preserved redirect paths

## Authentication Flow

1. Initial Load:
   - App starts → AuthContext checks auth state
   - Shows loading spinner during check
   - Redirects or renders based on auth state

2. Route Protection:
   - Protected routes check auth state
   - Loading states during checks
   - Automatic redirects if unauthenticated

3. Session Management:
   - Auth state refreshes on tab focus
   - Auth state refreshes on network reconnection
   - Centralized logout handling

4. Login/Register Flow:
   - Form submission → Server function call
   - Server handles Supabase auth
   - AuthContext updates on success
   - Redirect to intended destination

## Usage Examples

### Protected Component
```typescript
function ProtectedComponent() {
  const { user, loading } = useAuth()

  if (loading) {
    return <LoadingSpinner />
  }

  return <div>Welcome {user?.email}</div>
}
```

### Login Form
```typescript
function LoginForm() {
  const { refreshAuth } = useAuth()
  
  const loginMutation = useMutation({
    fn: loginFn,
    onSuccess: async () => {
      await refreshAuth()
      // Handle redirect
    }
  })
}
```

## Security Considerations

1. Server-Side Operations:
   - All Supabase interactions happen server-side
   - Tokens never exposed to client
   - Protected routes properly guarded

2. State Management:
   - Auth state cached in memory
   - Auto-refresh mechanisms
   - Clean logout handling

3. Route Protection:
   - Consistent auth checks
   - Loading states prevent flashes
   - Secure redirect handling

## Best Practices

1. Always use `useAuth` hook for auth state
2. Handle loading states appropriately
3. Use server functions for auth operations
4. Follow existing patterns for consistency
5. Never bypass the AuthContext system

## Integration with Other Systems

1. TanStack Query:
   - Used for data fetching
   - Integrates with auth state
   - Handles cache invalidation

2. TanStack Router:
   - Type-safe routing
   - Protected route handling
   - Clean redirect management

3. Supabase:
   - Used for auth only
   - All operations server-side
   - No direct database access

## Error Handling

1. Auth Errors:
   - User-friendly messages
   - Proper error states
   - Clean error recovery

2. Network Issues:
   - Auto-refresh on reconnect
   - Loading states during checks
   - Graceful degradation

## Future Considerations

1. Token Refresh:
   - Auto refresh before expiry
   - Background refresh
   - Session synchronization

2. Multi-Tab Support:
   - State synchronization
   - Logout coordination
   - Session management
======= middleware.md ======= with the path ./docs/middleware.md
# TanStack Server Function Middleware Guide

This guide explains how middleware works in our application, with a focus on authentication and server function protection.

## Core Concepts

Middleware intercepts server function requests, allowing you to:
- Verify authentication
- Add context data
- Validate inputs
- Handle errors consistently

### Key Benefits

- **Reusability:** Write auth logic once, apply everywhere
- **Type Safety:** Full TypeScript support for context
- **Separation:** Keep business logic clean
- **Security:** Consistent auth checks

## Authentication Middleware

Our auth middleware provides server-side session verification:

```typescript
// src/middleware/authMiddleware.ts
import { createMiddleware } from '@tanstack/react-start';
import { checkAuth } from '../utils/supabase';
import type { User } from '@supabase/supabase-js';

export interface AuthContext {
  user: User;
  accessToken: string;
}

export const authMiddleware = createMiddleware()
  .server(async ({ next }) => {
    const auth = await checkAuth();

    if (!auth.user) {
      throw new Error('Unauthorized');
    }

    return next({
      context: {
        user: auth.user,
        accessToken: auth.accessToken
      } satisfies AuthContext,
    });
  });
```

### Using Auth Middleware

Apply to server functions that need protection:

```typescript
// Example protected server function
export const getCredits = createServerFn({ method: 'GET' })
  .middleware([authMiddleware])
  .handler(async ({context}): Promise<GetCreditsResponse> => {
    const user = context.user;
    // Access user data safely
    return {
      error: false,
      credits: await fetchUserCredits(user.id)
    };
  });
```

## Input Validation

We use Zod for input validation:

```typescript
const authInputSchema = z.object({
  email: z.string().email('Invalid email address'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
});

export const loginFn = createServerFn({ method: 'POST' })
  .validator((data: unknown) => {
    return authInputSchema.parse(data)
  })
  .handler(async ({ data }) => {
    // Data is now validated
    const { email, password } = data;
    // Process login...
  });
```

## Error Handling

Middleware can catch and transform errors:

```typescript
const errorHandlerMiddleware = createMiddleware()
  .server(async ({ next }) => {
    try {
      return await next();
    } catch (error) {
      if (error instanceof AuthError) {
        return {
          error: true,
          message: 'Authentication failed'
        };
      }
      throw error; // Let other errors propagate
    }
  });
```

## Context Passing

Share data between middleware and handlers:

```typescript
interface UserContext {
  userId: string;
  permissions: string[];
}

const userContextMiddleware = createMiddleware()
  .server(async ({ next, context }) => {
    const user = context.user; // From auth middleware
    const permissions = await fetchUserPermissions(user.id);
    
    return next({
      context: {
        userId: user.id,
        permissions
      } satisfies UserContext
    });
  });
```

## Best Practices

1. **Authentication First:**
   - Always apply authMiddleware before other middleware
   - Check context.user early in handlers

2. **Type Safety:**
   ```typescript
   interface MyContext {
     user: User;
     permissions: string[];
   }
   
   const handler = async ({ context }: { context: MyContext }) => {
     // TypeScript ensures context properties exist
   };
   ```

3. **Error Handling:**
   - Use specific error types
   - Transform errors into user-friendly responses
   - Log errors appropriately

4. **Validation:**
   - Always validate inputs with Zod
   - Keep validation schemas near related functions
   - Use descriptive error messages

## Common Patterns

### Protected Route Pattern
```typescript
export const protectedAction = createServerFn()
  .middleware([
    authMiddleware,
    userContextMiddleware
  ])
  .handler(async ({ context }) => {
    // Access both auth and user context
    const { user, permissions } = context;
    // ... handler logic
  });
```

### Validation Pattern
```typescript
const inputSchema = z.object({
  // ... schema definition
});

export const validatedAction = createServerFn()
  .validator((data: unknown) => {
    return inputSchema.parse(data);
  })
  .middleware([authMiddleware])
  .handler(async ({ data, context }) => {
    // data is typed according to schema
    // context includes auth data
  });
```

## Middleware Order

1. Input Validation
2. Authentication
3. Error Handling
4. Custom Context
5. Handler Logic

======= server-functions.md ======= with the path ./docs/server-functions.md
Server Functions
What are Server Functions?
Server functions allow you to specify logic that can be invoked almost anywhere (even the client), but run only on the server. In fact, they are not so different from an API Route, but with a few key differences:

They do not have stable public URL (but you'll be able to do this very soon!)
They can be called from anywhere in your application, including loaders, hooks, components, etc., but cannot be called from API Routes.
However, they are similar to regular API Routes in that:

They have access to the request context, allowing you to read headers, set cookies, and more
They can access sensitive information, such as environment variables, without exposing them to the client
They can be used to perform any kind of server-side logic, such as fetching data from a database, sending emails, or interacting with other services
They can return any value, including primitives, JSON-serializable objects, and even raw Response objects
They can throw errors, including redirects and notFounds, which can be handled automatically by the router
How are server functions different from "React Server Functions"?

TanStack Server Functions are not tied to a specific front-end framework, and can be used with any front-end framework or none at all.
TanStack Server Functions are backed by standard HTTP requests and can be called as often as you like without suffering from serial-execution bottlenecks.
How do they work?
Server functions can be defined anywhere in your application, but must be defined at the top level of a file. They can be called throughout your application, including loaders, hooks, etc. Traditionally, this pattern is known as a Remote Procedure Call (RPC), but due to the isomorphic nature of these functions, we refer to them as server functions.

On the server bundle, server functions logic is left alone. Nothing needs to be done since they are already in the correct place.
On the client, server functions will be removed; they exist only on the server. Any calls to the server function on the client will be replaced with a fetch request to the server to execute the server function, and send the response back to the client.
Server Function Middleware
Server functions can use middleware to share logic, context, common operations, prerequisites, and much more. To learn more about server function middleware, be sure to read about them in the Middleware guide.

Defining Server Functions
We'd like to thank the tRPC team for both the inspiration of TanStack Start's server function design and guidance while implementing it. We love (and recommend) using tRPC for API Routes so much that we insisted on server functions getting the same 1st class treatment and developer experience. Thank you!

Server functions are defined with the createServerFn function, from the @tanstack/react-start package. This function takes an optional options argument for specifying configuration like the HTTP method and response type, and allows you to chain off the result to define things like the body of the server function, input validation, middleware, etc. Here's a simple example:

tsx

// getServerTime.ts
import { createServerFn } from '@tanstack/react-start'

export const getServerTime = createServerFn().handler(async () => {
  // Wait for 1 second
  await new Promise((resolve) => setTimeout(resolve, 1000))
  // Return the current time
  return new Date().toISOString()
})
Configuration Options
When creating a server function, you can provide configuration options to customize its behavior:

tsx

import { createServerFn } from '@tanstack/react-start'

export const getData = createServerFn({
  method: 'GET', // HTTP method to use
  response: 'data', // Response handling mode
}).handler(async () => {
  // Function implementation
})
Available Options
method

Specifies the HTTP method for the server function request:

tsx

method?: 'GET' | 'POST'
By default, server functions use GET if not specified.

response

Controls how responses are processed and returned:

tsx

response?: 'data' | 'full' | 'raw'
'data' (default): Automatically parses JSON responses and returns just the data
'full': Returns a response object with result data, error information, and context
'raw': Returns the raw Response object directly, enabling streaming responses and custom headers
Where can I call server functions?
From server-side code
From client-side code
From other server functions
Warning

Server functions cannot be called from API Routes. If you need to share business logic between server functions and API Routes, extract the shared logic into utility functions that can be imported by both.

Accepting Parameters
Server functions accept a single parameter, which can be a variety of types:

Standard JavaScript types
string
number
boolean
null
Array
Object
FormData
ReadableStream (of any of the above)
Promise (of any of the above)
Here's an example of a server function that accepts a simple string parameter:

tsx

import { createServerFn } from '@tanstack/react-start'

export const greet = createServerFn({
  method: 'GET',
})
  .validator((data: string) => data)
  .handler(async (ctx) => {
    return `Hello, ${ctx.data}!`
  })

greet({
  data: 'John',
})
Runtime Input Validation / Type Safety
Server functions can be configured to validate their input data at runtime, while adding type safety. This is useful for ensuring the input is of the correct type before executing the server function, and providing more friendly error messages.

This is done with the validator method. It will accept whatever input is passed to the server function. The value (and type) you return from this function will become the input passed to the actual server function handler.

Validators also integrate seamlessly with external validators, if you want to use something like Zod.

Basic Validation
Here's a simple example of a server function that validates the input parameter:

tsx

import { createServerFn } from '@tanstack/react-start'

type Person = {
  name: string
}

export const greet = createServerFn({ method: 'GET' })
  .validator((person: unknown): Person => {
    if (typeof person !== 'object' || person === null) {
      throw new Error('Person must be an object')
    }

    if ('name' in person && typeof person.name !== 'string') {
      throw new Error('Person.name must be a string')
    }

    return person as Person
  })
  .handler(async ({ data }) => {
    return `Hello, ${data.name}!`
  })
Using a Validation Library
Validation libraries like Zod can be used like so:

tsx

import { createServerFn } from '@tanstack/react-start'

import { z } from 'zod'

const Person = z.object({
  name: z.string(),
})

export const greet = createServerFn({ method: 'GET' })
  .validator((person: unknown) => {
    return Person.parse(person)
  })
  .handler(async (ctx) => {
    return `Hello, ${ctx.data.name}!`
  })

greet({
  data: {
    name: 'John',
  },
})
Type Safety
Since server-functions cross the network boundary, it's important to ensure the data being passed to them is not only the right type, but also validated at runtime. This is especially important when dealing with user input, as it can be unpredictable. To ensure developers validate their I/O data, types are reliant on validation. The return type of the validator function will be the input to the server function's handler.

tsx

import { createServerFn } from '@tanstack/react-start'

type Person = {
  name: string
}

export const greet = createServerFn({ method: 'GET' })
  .validator((person: unknown): Person => {
    if (typeof person !== 'object' || person === null) {
      throw new Error('Person must be an object')
    }

    if ('name' in person && typeof person.name !== 'string') {
      throw new Error('Person.name must be a string')
    }

    return person as Person
  })
  .handler(
    async ({
      data, // Person
    }) => {
      return `Hello, ${data.name}!`
    },
  )

function test() {
  greet({ data: { name: 'John' } }) // OK
  greet({ data: { name: 123 } }) // Error: Argument of type '{ name: number; }' is not assignable to parameter of type 'Person'.
}
Inference
Server functions infer their input, and output types based on the input to the validator, and return value of handler functions, respectively. In fact, the validator you define can even have its own separate input/output types, which can be useful if your validator performs transformations on the input data.

To illustrate this, let's take a look at an example using the zod validation library:

tsx

import { createServerFn } from '@tanstack/react-start'
import { z } from 'zod'

const transactionSchema = z.object({
  amount: z.string().transform((val) => parseInt(val, 10)),
})

const createTransaction = createServerFn()
  .validator(transactionSchema)
  .handler(({ data }) => {
    return data.amount // Returns a number
  })

createTransaction({
  data: {
    amount: '123', // Accepts a string
  },
})
Non-Validated Inference
While we highly recommend using a validation library to validate your network I/O data, you may, for whatever reason not want to validate your data, but still have type safety. To do this, provide type information to the server function using an identity function as the validator, that types the input, and or output to the correct types:

tsx

import { createServerFn } from '@tanstack/react-start'

type Person = {
  name: string
}

export const greet = createServerFn({ method: 'GET' })
  .validator((d: Person) => d)
  .handler(async (ctx) => {
    return `Hello, ${ctx.data.name}!`
  })

greet({
  data: {
    name: 'John',
  },
})
JSON Parameters
Server functions can accept JSON-serializable objects as parameters. This is useful for passing complex data structures to the server:

tsx

import { createServerFn } from '@tanstack/react-start'

type Person = {
  name: string
  age: number
}

export const greet = createServerFn({ method: 'GET' })
  .validator((data: Person) => data)
  .handler(async ({ data }) => {
    return `Hello, ${data.name}! You are ${data.age} years old.`
  })

greet({
  data: {
    name: 'John',
    age: 34,
  },
})
FormData Parameters
Server functions can accept FormData objects as parameters

tsx

import { createServerFn } from '@tanstack/react-start'

export const greetUser = createServerFn({ method: 'POST' })
  .validator((data) => {
    if (!(data instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const name = data.get('name')
    const age = data.get('age')

    if (!name || !age) {
      throw new Error('Name and age are required')
    }

    return {
      name: name.toString(),
      age: parseInt(age.toString(), 10),
    }
  })
  .handler(async ({ data: { name, age } }) => {
    return `Hello, ${name}! You are ${age} years old.`
  })

// Usage
function Test() {
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault()
        const formData = new FormData(event.currentTarget)
        const response = await greetUser({ data: formData })
        console.log(response)
      }}
    >
      <input name="name" />
      <input name="age" />
      <button type="submit">Submit</button>
    </form>
  )
}
Server Function Context
In addition to the single parameter that server functions accept, you can also access server request context from within any server function using utilities from @tanstack/react-start/server. Under the hood, we use Unjs's h3 package to perform cross-platform HTTP requests.

There are many context functions available to you for things like:

Accessing the request context
Accessing/setting headers
Accessing/setting sessions/cookies
Setting response status codes and status messages
Dealing with multi-part form data
Reading/Setting custom server context properties
For a full list of available context functions, see all of the available h3 Methods or inspect the @tanstack/start-server-core Source Code.

For starters, here are a few examples:

Accessing the Request Context
Let's use the getWebRequest function to access the request itself from within a server function:

tsx

import { createServerFn } from '@tanstack/react-start'
import { getWebRequest } from '@tanstack/react-start/server'

export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    const request = getWebRequest()

    console.log(request.method) // GET

    console.log(request.headers.get('User-Agent')) // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3
  },
)
Accessing Headers
Use the getHeaders function to access all headers from within a server function:

tsx

import { createServerFn } from '@tanstack/react-start'
import { getHeaders } from '@tanstack/react-start/server'

export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    console.log(getHeaders())
    // {
    //   "accept": "*/*",
    //   "accept-encoding": "gzip, deflate, br",
    //   "accept-language": "en-US,en;q=0.9",
    //   "connection": "keep-alive",
    //   "host": "localhost:3000",
    //   ...
    // }
  },
)
You can also access individual headers using the getHeader function:

tsx

import { createServerFn } from '@tanstack/react-start'
import { getHeader } from '@tanstack/react-start/server'

export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    console.log(getHeader('User-Agent')) // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3
  },
)
Returning Values
Server functions can return a few different types of values:

Primitives
JSON-serializable objects
redirect errors (can also be thrown)
notFound errors (can also be thrown)
Raw Response objects
Returning Primitives and JSON
To return any primitive or JSON-serializable object, simply return the value from the server function:

tsx

import { createServerFn } from '@tanstack/react-start'

export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    return new Date().toISOString()
  },
)

export const getServerData = createServerFn({ method: 'GET' }).handler(
  async () => {
    return {
      message: 'Hello, World!',
    }
  },
)
By default, server functions assume that any non-Response object returned is either a primitive or JSON-serializable object.

Responding with Custom Headers
To respond with custom headers, you can use the setHeader function:

tsx

import { createServerFn } from '@tanstack/react-start'
import { setHeader } from '@tanstack/react-start/server'

export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    setHeader('X-Custom-Header', 'value')
    return new Date().toISOString()
  },
)
Responding with Custom Status Codes
To respond with a custom status code, you can use the setResponseStatus function:

tsx

import { createServerFn } from '@tanstack/react-start'
import { setResponseStatus } from '@tanstack/react-start/server'

export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    setResponseStatus(201)
    return new Date().toISOString()
  },
)
Returning Raw Response objects
To return a raw Response object, return a Response object from the server function and set response: 'raw':

tsx

import { createServerFn } from '@tanstack/react-start'

export const getServerTime = createServerFn({
  method: 'GET',
  response: 'raw',
}).handler(async () => {
  // Read a file from s3
  return fetch('https://example.com/time.txt')
})
The response: 'raw' option also allows for streaming responses among other things:

tsx

import { createServerFn } from '@tanstack/react-start'

export const streamEvents = createServerFn({
  method: 'GET',
  response: 'raw',
}).handler(async ({ signal }) => {
  // Create a ReadableStream to send chunks of data
  const stream = new ReadableStream({
    async start(controller) {
      // Send initial response immediately
      controller.enqueue(new TextEncoder().encode('Connection established\n'))

      let count = 0
      const interval = setInterval(() => {
        // Check if the client disconnected
        if (signal.aborted) {
          clearInterval(interval)
          controller.close()
          return
        }

        // Send a data chunk
        controller.enqueue(
          new TextEncoder().encode(
            `Event ${++count}: ${new Date().toISOString()}\n`,
          ),
        )

        // End after 10 events
        if (count >= 10) {
          clearInterval(interval)
          controller.close()
        }
      }, 1000)

      // Ensure we clean up if the request is aborted
      signal.addEventListener('abort', () => {
        clearInterval(interval)
        controller.close()
      })
    },
  })

  // Return a streaming response
  return new Response(stream, {
    headers: {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      Connection: 'keep-alive',
    },
  })
})
The response: 'raw' option is particularly useful for:

Streaming APIs where data is sent incrementally
Server-sent events
Long-polling responses
Custom content types and binary data
Throwing Errors
Aside from special redirect and notFound errors, server functions can throw any custom error. These errors will be serialized and sent to the client as a JSON response along with a 500 status code.

tsx

import { createServerFn } from '@tanstack/react-start'

export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  throw new Error('Something went wrong!')
})

// Usage
function Test() {
  try {
    await doStuff()
  } catch (error) {
    console.error(error)
    // {
    //   message: "Something went wrong!",
    //   stack: "Error: Something went wrong!\n    at doStuff (file:///path/to/file.ts:3:3)"
    // }
  }
}
Cancellation
On the client, server function calls can be cancelled via an AbortSignal. On the server, an AbortSignal will notify if the request closed before execution finished.

tsx

import { createServerFn } from '@tanstack/react-start'

export const abortableServerFn = createServerFn().handler(
  async ({ signal }) => {
    return new Promise<string>((resolve, reject) => {
      if (signal.aborted) {
        return reject(new Error('Aborted before start'))
      }
      const timerId = setTimeout(() => {
        console.log('server function finished')
        resolve('server function result')
      }, 1000)
      const onAbort = () => {
        clearTimeout(timerId)
        console.log('server function aborted')
        reject(new Error('Aborted'))
      }
      signal.addEventListener('abort', onAbort, { once: true })
    })
  },
)

// Usage
function Test() {
  const controller = new AbortController()
  const serverFnPromise = abortableServerFn({
    signal: controller.signal,
  })
  await new Promise((resolve) => setTimeout(resolve, 500))
  controller.abort()
  try {
    const serverFnResult = await serverFnPromise
    console.log(serverFnResult) // should never get here
  } catch (error) {
    console.error(error) // "signal is aborted without reason"
  }
}
Calling server functions from within route lifecycles
Server functions can be called normally from route loaders, beforeLoads, or any other router-controlled APIs. These APIs are equipped to handle errors, redirects, and notFounds thrown by server functions automatically.

tsx

import { getServerTime } from './getServerTime'

export const Route = createFileRoute('/time')({
  loader: async () => {
    const time = await getServerTime()

    return {
      time,
    }
  },
})
Calling server functions from hooks and components
Server functions can throw redirects or notFounds and while not required, it is recommended to catch these errors and handle them appropriately. To make this easier, the @tanstack/react-start package exports a useServerFn hook that can be used to bind server functions to components and hooks:

tsx

import { useServerFn } from '@tanstack/react-start'
import { useQuery } from '@tanstack/react-query'
import { getServerTime } from './getServerTime'

export function Time() {
  const getTime = useServerFn(getServerTime)

  const timeQuery = useQuery({
    queryKey: 'time',
    queryFn: () => getTime(),
  })
}
Calling server functions anywhere else
When using server functions, be aware that redirects and notFounds they throw will only be handled automatically when called from:

Route lifecycles
Components using the useServerFn hook
For other usage locations, you'll need to handle these cases manually.

Redirects
Server functions can throw a redirect error to redirect the user to a different URL. This is useful for handling authentication, authorization, or other scenarios where you need to redirect the user to a different page.

During SSR, redirects are handled by sending a 302 response to the client with the new location
On the client, redirects are handled by the router automatically from within a route lifecycle or a component that uses the useServerFn hook. If you call a server function from anywhere else, redirects will not be handled automatically.
To throw a redirect, you can use the redirect function exported from the @tanstack/react-router package:

tsx

import { redirect } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'

export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the home page
  throw redirect({
    to: '/',
  })
})
Redirects can utilize all of the same options as router.navigate, useNavigate() and <Link> components. So feel free to also pass:

Path Params
Search Params
Hash
Redirects can also set the status code of the response by passing a status option:

tsx

import { redirect } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'

export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the home page with a 301 status code
  throw redirect({
    to: '/',
    status: 301,
  })
})
You can also redirect to an external target using href:

tsx

import { redirect } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'

export const auth = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the auth provider
  throw redirect({
    href: 'https://authprovider.com/login',
  })
})
⚠️ Do not use @tanstack/react-start/server's sendRedirect function to send soft redirects from within server functions. This will send the redirect using the Location header and will force a full page hard navigation on the client.

Redirect Headers
You can also set custom headers on a redirect by passing a headers option:

tsx

import { redirect } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'

export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the home page with a custom header
  throw redirect({
    to: '/',
    headers: {
      'X-Custom-Header': 'value',
    },
  })
})
Not Found
While calling a server function from a loader or beforeLoad route lifecycle, a special notFound error can be thrown to indicate to the router that the requested resource was not found. This is more useful than a simple 404 status code, as it allows you to render a custom 404 page, or handle the error in a custom way. If notFound is thrown from a server function used outside of a route lifecycle, it will not be handled automatically.

To throw a notFound, you can use the notFound function exported from the @tanstack/react-router package:

tsx

import { notFound } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'

const getStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Randomly return a not found error
  if (Math.random() < 0.5) {
    throw notFound()
  }

  // Or return some stuff
  return {
    stuff: 'stuff',
  }
})

export const Route = createFileRoute('/stuff')({
  loader: async () => {
    const stuff = await getStuff()

    return {
      stuff,
    }
  },
})
Not found errors are a core feature of TanStack Router,

Handling Errors
If a server function throws a (non-redirect/non-notFound) error, it will be serialized and sent to the client as a JSON response along with a 500 status code. This is useful for debugging, but you may want to handle these errors in a more user-friendly way. You can do this by catching the error and handling it in your route lifecycle, component, or hook as you normally would.

tsx

import { createServerFn } from '@tanstack/react-start'

export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  undefined.foo()
})

export const Route = createFileRoute('/stuff')({
  loader: async () => {
    try {
      await doStuff()
    } catch (error) {
      // Handle the error:
      // error === {
      //   message: "Cannot read property 'foo' of undefined",
      //   stack: "TypeError: Cannot read property 'foo' of undefined\n    at doStuff (file:///path/to/file.ts:3:3)"
    }
  },
})
No-JS Server Functions
Without JavaScript enabled, there's only one way to execute server functions: by submitting a form.

This is done by adding a form element to the page with the HTML attribute action.

Notice that we mentioned the HTML attribute action. This attribute only accepts a string in HTML, just like all other attributes.

While React 19 added support for passing a function to action, it's a React-specific feature and not part of the HTML standard.

The action attribute tells the browser where to send the form data when the form is submitted. In this case, we want to send the form data to the server function.

To do this, we can utilize the url property of the server function:

ts

const yourFn = createServerFn({ method: 'POST' })
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }

    const name = formData.get('name')

    if (!name) {
      throw new Error('Name is required')
    }

    return name
  })
  .handler(async ({ data: name }) => {
    console.log(name) // 'John'
  })

console.info(yourFn.url)
And pass this to the action attribute of the form:

tsx

function Component() {
  return (
    <form action={yourFn.url} method="POST">
      <input name="name" defaultValue="John" />
      <button type="submit">Click me!</button>
    </form>
  )
}
When the form is submitted, the server function will be executed.

No-JS Server Function Arguments
To pass arguments to a server function when submitting a form, you can use the input element with the name attribute to attach the argument to the FormData passed to your server function:

tsx

const yourFn = createServerFn({ method: 'POST' })
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }

    const age = formData.get('age')

    if (!age) {
      throw new Error('age is required')
    }

    return age.toString()
  })
  .handler(async ({ data: formData }) => {
    // `age` will be '123'
    const age = formData.get('age')
    // ...
  })

function Component() {
  return (
    //  We need to tell the server that our data type is `multipart/form-data` by setting the `encType` attribute on the form.
    <form action={yourFn.url} method="POST" encType="multipart/form-data">
      <input name="age" defaultValue="34" />
      <button type="submit">Click me!</button>
    </form>
  )
}
When the form is submitted, the server function will be executed with the form's data as an argument.

No-JS Server Function Return Value
Regardless of whether JavaScript is enabled, the server function will return a response to the HTTP request made from the client.

When JavaScript is enabled, this response can be accessed as the return value of the server function in the client's JavaScript code.

ts

const yourFn = createServerFn().handler(async () => {
  return 'Hello, world!'
})

// `.then` is not available when JavaScript is disabled
yourFn().then(console.log)
However, when JavaScript is disabled, there is no way to access the return value of the server function in the client's JavaScript code.

Instead, the server function can provide a response to the client, telling the browser to navigate in a certain way.

When combined with a loader from TanStack Router, we're able to provide an experience similar to a single-page application, even when JavaScript is disabled; all by telling the browser to reload the current page with new data piped through the loader:

tsx

import * as fs from 'fs'
import { createFileRoute } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'

const filePath = 'count.txt'

async function readCount() {
  return parseInt(
    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),
  )
}

const getCount = createServerFn({
  method: 'GET',
}).handler(() => {
  return readCount()
})

const updateCount = createServerFn({ method: 'POST' })
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }

    const addBy = formData.get('addBy')

    if (!addBy) {
      throw new Error('addBy is required')
    }

    return parseInt(addBy.toString())
  })
  .handler(async ({ data: addByAmount }) => {
    const count = await readCount()
    await fs.promises.writeFile(filePath, `${count + addByAmount}`)
    // Reload the page to trigger the loader again
    return new Response('ok', { status: 301, headers: { Location: '/' } })
  })

export const Route = createFileRoute('/')({
  component: Home,
  loader: async () => await getCount(),
})

function Home() {
  const state = Route.useLoaderData()

  return (
    <div>
      <form
        action={updateCount.url}
        method="POST"
        encType="multipart/form-data"
      >
        <input type="number" name="addBy" defaultValue="1" />
        <button type="submit">Add</button>
      </form>
      <pre>{state}</pre>
    </div>
  )
}
Static Server Functions
When using prerendering/static-generation, server functions can also be "static", which enables their results to be cached at build time and served as static assets.

Learn all about this pattern on the Static Server Functions page.

How are server functions compiled?
Under the hood, server functions are extracted out of the client bundle and into a separate server bundle. On the server, they are executed as-is, and the result is sent back to the client. On the client, server functions proxy the request to the server, which executes the function and sends the result back to the client, all via fetch.

The process looks like this:

When createServerFn is found in a file, the inner function is checked for a use server directive
If the use server directive is missing, it is added to the top of the function
On the client, the inner function is extracted out of the client bundle and into a separate server bundle
The client-side server function is replaced with a proxy function that sends a request to the server to execute the function that was extracted
On the server, the server function is not extracted, and is executed as-is
After extraction occurs, each bundle applies a dead-code elimination process to remove any unused code from each bundle.

======= tanstack-core-concepts.md ======= with the path ./docs/tanstack-core-concepts.md
# TanStack Core Concepts

This guide covers the core concepts of our TanStack-based architecture, focusing on routing, data loading, layouts, and authentication.

## 1. Project Structure

```
src/
├── auth/                 # Authentication system
│   └── AuthContext.tsx   # Central auth management
├── routes/
│   ├── _authed/         # Protected routes container
│   │   ├── -server.ts   # Auth server functions
│   │   └── app/         # Protected application routes
│   ├── __root.tsx       # Root layout with AuthProvider
│   ├── _authed.tsx      # Auth layout with protection
│   └── index.tsx        # Public home
├── components/
│   ├── ui/             # Shared UI components
│   └── [feature]/      # Feature-specific components
└── hooks/              # Custom hooks
```

## 2. Authentication System

Our authentication system uses a combination of:
- React Context for state management (AuthContext)
- Server-side Supabase operations
- TanStack Router for protection

### AuthContext Usage

```typescript
function ProtectedComponent() {
  const { user, loading, logout } = useAuth()

  if (loading) {
    return <LoadingSpinner />
  }

  return (
    <div>
      Welcome {user?.email}
      <button onClick={logout}>Logout</button>
    </div>
  )
}
```

### Protected Routes

All routes under `_authed/` are automatically protected:

```typescript
// src/routes/_authed.tsx
export const Route = createFileRoute('/_authed')({
  component: AuthedLayout,
})

function AuthedLayout() {
  const { user, loading } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!loading && !user) {
      router.navigate({
        to: '/login',
        search: {
          redirect: router.state.location.pathname,
        },
        replace: true
      })
    }
  }, [user, loading, router])

  if (loading) {
    return <LoadingSpinner />
  }

  if (!user) {
    return null
  }

  return <Outlet />
}
```

## 3. Server Functions

Server functions handle all sensitive operations:

```typescript
// src/routes/_authed/-server.ts
export const loginFn = createServerFn({ method: 'POST' })
  .validator((data: unknown) => {
    return authInputSchema.parse(data)
  })
  .handler(async ({ data }) => {
    const supabase = getServerSupabase()
    const { data: authData, error } = await supabase.auth.signInWithPassword({
      email: data.email,
      password: data.password,
    })
    // Handle response...
  })
```

## 4. Data Loading

Use TanStack Query for data fetching:

```typescript
function UserProfile() {
  const { data: user, isLoading } = useQuery({
    queryKey: ['user-profile'],
    queryFn: () => getUserProfile(),
  })

  if (isLoading) return <LoadingSpinner />

  return <div>{user.name}</div>
}
```

## 5. Layouts

### Root Layout with Auth

```typescript
// src/routes/__root.tsx
export const Route = createRootRoute({
  component: RootComponent,
})

function RootComponent() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <Outlet />
      </AuthProvider>
    </QueryClientProvider>
  )
}
```

### Feature Layouts

```typescript
// src/routes/_authed/app/route.tsx
export const Route = createFileRoute('/app')({
  component: AppLayout,
})

function AppLayout() {
  return (
    <div className="flex">
      <Sidebar />
      <main>
        <Outlet />
      </main>
    </div>
  )
}
```

## 6. Navigation

Use type-safe routing with Link component:

```typescript
import { Link } from '@tanstack/react-router'

function Navigation() {
  return (
    <nav>
      <Link to="/app/dashboard">Dashboard</Link>
      <Link to="/app/settings">Settings</Link>
    </nav>
  )
}
```

## 7. Error Handling

Consistent error handling through toast notifications:

```typescript
const { toast } = useToast()

const mutation = useMutation({
  mutationFn: updateProfile,
  onError: (error) => {
    toast({
      title: "Error",
      description: error.message,
      variant: "destructive",
    })
  }
})
```

## Best Practices

1. Always use `useAuth` for authentication state
2. Handle loading states appropriately
3. Keep sensitive operations server-side
4. Use type-safe routing
5. Follow the established folder structure
6. Document new patterns and features

For more detailed documentation on specific topics, see:
- [Auth System Documentation](./auth-system.md)
- [Middleware Documentation](./middleware.md)
======= tanstack-data-fetching.md ======= with the path ./docs/tanstack-data-fetching.md
# Data Fetching Strategies in TanStack Start

This document explores three different methods for fetching data within a TanStack Start application, using a simple blog post example with a "Related Posts" section. Understanding these methods helps you choose the best approach based on user experience (UX), search engine optimization (SEO), and component structure needs.

**Example Context:**

We have a blog post page (`/about` in the example). On this page, besides the main content, there's a sidebar component (`RelatedPosts`) that needs to fetch and display a list of related blog posts.

## Method 1: Route Loader (`loader`)

This is the most basic TanStack Start approach for fetching data *before* a route component renders.

**Concept:**

*   You define a `loader` function within your route definition (`createFileRoute`).
*   This function typically fetches data (often using `createServerFn` for type-safe server communication).
*   The `loader` function *must* resolve (finish fetching) before the route's component (`RouteComponent`) is rendered.
*   The fetched data is then made available to the component tree via the `Route.useLoaderData()` hook.

**Pros:**

*   **Good for SEO:** Ensures data is present in the initial HTML render, which is beneficial for web crawlers.
*   **Type Safety:** Using `createServerFn` provides end-to-end type safety between your server logic and client component.
*   **Initial Data Guarantee:** The component always receives the data it needs on the initial render (no loading state *within* the component needed for this specific data).

**Cons:**

*   **Blocks Rendering:** The entire route navigation is blocked until the `loader` function completes. If the data fetch is slow, the user sees a blank screen or the previous page for longer, potentially leading to a poor UX.
*   **Less Granular Loading:** You can't easily show loading states for *parts* of the page fetched via the loader; the whole page waits.

**Implementation:**

1.  **Define Server Function (`createServerFn`):** Create a function to fetch data on the server. This abstracts the API endpoint creation.

    ```typescript
    // src/routes/about.tsx (or a separate utility file)
    import { createServerFn } from "@tanstack/react-start";

    // Example Server Function to fetch related posts
    const loaderFn = createServerFn("GET", async () => {
      console.log("Fetching related posts on the server...");
      // Simulate a database call
      await new Promise((resolve) => setTimeout(resolve, 2000)); // 2-second delay

      // Return the data structure
      return {
        relatedPosts: [
          { title: "Related Post 1", description: "Description 1" },
          { title: "Related Post 2", description: "Description 2" },
          { title: "Related Post 3", description: "Description 3" },
        ],
      };
    });
    ```

2.  **Define Route with Loader:** In your route file, use the `loader` property.

    ```typescript
    // src/routes/about.tsx
    import { createFileRoute } from "@tanstack/react-router";
    import { useLoaderData } from "@tanstack/react-router"; // Import useLoaderData

    export const Route = createFileRoute("/about")({
      component: RouteComponent,
      // Loader function: Calls our server function
      loader: async () => {
        console.log("Route loader executing...");
        const data = await loaderFn(); // Call the server function
        return data; // Return the fetched data
      },
    });

    // Component to display related posts
    function RelatedPosts() {
      // Access data fetched by the route's loader
      const data = Route.useLoaderData(); // Use the specific Route's hook

      return (
        <aside className="w-80 shrink-0 bg-gray-800 p-6 rounded-lg">
          <h2 className="text-xl font-semibold mb-4">Related Posts</h2>
          <div className="space-y-4">
            {data.relatedPosts.map((post) => (
              <div
                key={post.title}
                className="border-b border-gray-700 last:border-0 pb-4 last:pb-0"
              >
                <h3 className="text-lg font-medium text-white mb-2">
                  {post.title}
                </h3>
                <p className="text-gray-400 text-sm">{post.description}</p>
              </div>
            ))}
          </div>
        </aside>
      );
    }

    // Main route component
    function RouteComponent() {
      return (
        <div className="flex gap-8">
          <article className="flex-1">
            <h1 className="text-4xl font-bold mb-4">
              The Future of Web Development
            </h1>
            {/* ... other blog content ... */}
          </article>
          {/* Render the RelatedPosts component */}
          <RelatedPosts />
        </div>
      );
    }
    ```

**Result:** When navigating to `/about`, the page will pause for 2 seconds (due to our simulated delay) before rendering the entire content, including the related posts.

---

## Method 2: Suspense (`useSuspenseQuery`)

This approach leverages React's built-in `<Suspense>` component and TanStack Query's `useSuspenseQuery` hook for a better loading UX.

**Concept:**

*   The main page component (`RouteComponent`) renders *immediately*.
*   The component responsible for fetching data (`RelatedPosts`) is wrapped in a `<Suspense>` boundary.
*   The `<Suspense>` boundary shows a `fallback` UI (e.g., a spinner or skeleton) while the data is loading.
*   Inside `RelatedPosts`, `useSuspenseQuery` is used. This hook integrates with Suspense: it *suspends* rendering of the component until data is ready, triggering the nearest `<Suspense>` fallback.
*   Data fetching happens on the client-side (or potentially streamed from the server depending on TanStack Start/Query setup).

**Pros:**

*   **Better UX:** The main page content loads instantly. Users see immediate feedback (the page structure and a loading indicator for the pending section).
*   **Granular Loading States:** Only the part of the UI waiting for data shows a loader.
*   **Streaming Potential:** Works well with SSR streaming capabilities.

**Cons:**

*   **Client-Side Fetching (typically):** Data might not be present in the *initial* HTML source sent from the server (unless specific pre-fetching strategies are used), which *could* be less ideal for critical SEO content compared to the `loader` method.
*   Requires structuring components with Suspense boundaries.

**Implementation:**

1.  **Remove/Comment Loader from Route:** The route itself no longer needs to block on this data.

    ```typescript
    // src/routes/about.tsx
    import { createFileRoute } from "@tanstack/react-router";
    import React, { Suspense } from "react"; // Import Suspense
    import { useSuspenseQuery } from "@tanstack/react-query"; // Import useSuspenseQuery

    // Define the server function (loaderFn) as in Method 1...

    // Route definition WITHOUT the loader for relatedPosts
    export const Route = createFileRoute("/about")({
      component: RouteComponent,
      // loader: async () => { /* ... potentially load OTHER essential data ... */ }
    });

    // Component to display related posts (modified)
    function RelatedPosts() {
      // Use useSuspenseQuery
      const { data } = useSuspenseQuery({
        queryKey: ["relatedPosts"], // Unique key for this query
        queryFn: () => loaderFn(), // Call the server function to fetch data
      });

      // Data is guaranteed to be available here because Suspense handles loading
      return (
        <div className="space-y-4">
          {data.relatedPosts.map((post) => (
             <div
                key={post.title}
                className="border-b border-gray-700 last:border-0 pb-4 last:pb-0"
              >
                <h3 className="text-lg font-medium text-white mb-2">
                  {post.title}
                </h3>
                <p className="text-gray-400 text-sm">{post.description}</p>
              </div>
          ))}
        </div>
      );
    }

    // Main route component (modified)
    function RouteComponent() {
      return (
        <div className="flex gap-8">
          <article className="flex-1">
             <h1 className="text-4xl font-bold mb-4">
              The Future of Web Development
            </h1>
            {/* ... other blog content ... */}
          </article>

          {/* Wrap RelatedPosts in Suspense */}
          <aside className="w-80 shrink-0 bg-gray-800 p-6 rounded-lg">
             <h2 className="text-xl font-semibold mb-4">Related Posts</h2>
             <Suspense fallback={<div className="text-center py-8">Loading...</div>}>
               <RelatedPosts />
             </Suspense>
          </aside>
        </div>
      );
    }
    ```

**Result:** When navigating to `/about`, the main blog content and the "Related Posts" title appear instantly. A "Loading..." message shows in the related posts section for 2 seconds, then it's replaced by the actual post list.

---

## Method 3: Standard Query (`useQuery`)

This is the traditional TanStack Query (React Query) approach, primarily for client-side data fetching and manual loading state management.

**Concept:**

*   Similar to Suspense, the main page renders immediately.
*   Inside the `RelatedPosts` component, the standard `useQuery` hook is used.
*   `useQuery` provides explicit loading (`isLoading`, `isFetching`) and error states (`isError`, `error`) that you must handle manually in your component's rendering logic.
*   Data fetching happens on the client-side after the component mounts.

**Pros:**

*   **Maximum Flexibility:** Full control over loading, error, and idle states within the component.
*   **Familiar Pattern:** Well-understood by developers already using React Query/TanStack Query in SPAs.
*   **Good for Non-Critical/Background Data:** Excellent for data that can load after the main content is visible without needing Suspense features.

**Cons:**

*   **Manual State Handling:** Requires explicit checks (`if (isLoading)`, `if (isError)`) in the JSX, which can add boilerplate.
*   **Client-Side Fetching:** Same potential SEO drawback as the Suspense method if data isn't pre-fetched.
*   Can lead to layout shifts if loading/error states aren't handled carefully (e.g., using skeleton loaders).

**Implementation:**

1.  **Route Definition (No Loader):** Same as Method 2, the route doesn't need the loader for this data.
2.  **Modify Component for `useQuery`:**

    ```typescript
    // src/routes/about.tsx
    import { createFileRoute } from "@tanstack/react-router";
    import React from "react";
    import { useQuery } from "@tanstack/react-query"; // Import useQuery

    // Define the server function (loaderFn) as in Method 1...

    export const Route = createFileRoute("/about")({
      component: RouteComponent,
    });

    // Component to display related posts (modified for useQuery)
    function RelatedPosts() {
      // Use useQuery
      const { data, isLoading, isError, error } = useQuery({
        queryKey: ["relatedPosts"], // Unique key
        queryFn: () => loaderFn(),   // Fetch function
      });

      // Manual Loading State Handling
      if (isLoading) {
        // Example Skeleton Loader
        return (
          <div className="space-y-4 animate-pulse">
            {[1, 2, 3].map((i) => (
              <div key={i} className="border-b border-gray-700 last:border-0 pb-4 last:pb-0">
                <div className="h-6 bg-gray-700 rounded w-3/4 mb-2"></div> {/* Title Skel */}
                <div className="h-4 bg-gray-700 rounded w-full"></div>   {/* Desc Skel */}
              </div>
            ))}
          </div>
        );
      }

      // Manual Error State Handling
      if (isError) {
        return <div className="text-red-500">Error loading posts: {error.message}</div>;
      }

      // Render Data (add optional chaining ?. just in case data is undefined briefly)
      return (
        <div className="space-y-4">
          {data?.relatedPosts.map((post) => (
             <div
                key={post.title}
                className="border-b border-gray-700 last:border-0 pb-4 last:pb-0"
              >
                <h3 className="text-lg font-medium text-white mb-2">
                  {post.title}
                </h3>
                <p className="text-gray-400 text-sm">{post.description}</p>
              </div>
          ))}
        </div>
      );
    }

    // Main route component (No Suspense needed unless used elsewhere)
    function RouteComponent() {
       return (
        <div className="flex gap-8">
          <article className="flex-1">
             <h1 className="text-4xl font-bold mb-4">
              The Future of Web Development
            </h1>
            {/* ... other blog content ... */}
          </article>
          <aside className="w-80 shrink-0 bg-gray-800 p-6 rounded-lg">
             <h2 className="text-xl font-semibold mb-4">Related Posts</h2>
             {/* Render RelatedPosts directly */}
             <RelatedPosts />
          </aside>
        </div>
      );
    }
    ```

**Result:** Similar to Suspense, the main content loads instantly. The related posts section shows a skeleton loader for 2 seconds, then displays the fetched posts.

---

## Summary & Choosing an Approach

*   **Use `loader`:** When data *must* be available for the initial render (critical for content, SEO), and a slightly longer initial load time is acceptable. Good for primary page content.
*   **Use `useSuspenseQuery` + `<Suspense>`:** When you want a better loading UX for non-critical sections of the page. The page loads instantly, and loading fallbacks are shown for parts fetching data. Integrates well with React's concurrent features. Often the preferred method for secondary content or data loaded after initial interaction.
*   **Use `useQuery`:** When you need fine-grained control over loading/error states or are integrating with existing client-side fetching patterns. Suitable for background fetches or when Suspense isn't desired/needed for a specific component.

Knowing all three allows you to mix and match strategies within your TanStack Start application for the best performance and user experience.

---

**Further Learning:**

*   Check out the official [TanStack Router Docs](https://tanstack.com/router/latest/docs/overview)
*   Explore the [TanStack Query Docs](https://tanstack.com/query/latest/docs/react/overview)
*   Join the community Discord (link mentioned in the video, usually found on TanStack websites).

Happy Coding!
======= tanstack-prefetching.md ======= with the path ./docs/tanstack-prefetching.md
# Data Fetching Strategies in TanStack Start

This document explores three different methods for fetching data within a TanStack Start application, using a simple blog post example with a "Related Posts" section. Understanding these methods helps you choose the best approach based on user experience (UX), search engine optimization (SEO), and component structure needs.

**Example Context:**

We have a blog post page (`/about` in the example). On this page, besides the main content, there's a sidebar component (`RelatedPosts`) that needs to fetch and display a list of related blog posts.

## Method 1: Route Loader (`loader`)

This is the most basic TanStack Start approach for fetching data *before* a route component renders.

**Concept:**

*   You define a `loader` function within your route definition (`createFileRoute`).
*   This function typically fetches data (often using `createServerFn` for type-safe server communication).
*   The `loader` function *must* resolve (finish fetching) before the route's component (`RouteComponent`) is rendered.
*   The fetched data is then made available to the component tree via the `Route.useLoaderData()` hook.

**Pros:**

*   **Good for SEO:** Ensures data is present in the initial HTML render, which is beneficial for web crawlers.
*   **Type Safety:** Using `createServerFn` provides end-to-end type safety between your server logic and client component.
*   **Initial Data Guarantee:** The component always receives the data it needs on the initial render (no loading state *within* the component needed for this specific data).

**Cons:**

*   **Blocks Rendering:** The entire route navigation is blocked until the `loader` function completes. If the data fetch is slow, the user sees a blank screen or the previous page for longer, potentially leading to a poor UX.
*   **Less Granular Loading:** You can't easily show loading states for *parts* of the page fetched via the loader; the whole page waits.

**Implementation:**

1.  **Define Server Function (`createServerFn`):** Create a function to fetch data on the server. This abstracts the API endpoint creation.

    ```typescript
    // src/routes/about.tsx (or a separate utility file)
    import { createServerFn } from "@tanstack/react-start";

    // Example Server Function to fetch related posts
    const loaderFn = createServerFn("GET", async () => {
      console.log("Fetching related posts on the server...");
      // Simulate a database call
      await new Promise((resolve) => setTimeout(resolve, 2000)); // 2-second delay

      // Return the data structure
      return {
        relatedPosts: [
          { title: "Related Post 1", description: "Description 1" },
          { title: "Related Post 2", description: "Description 2" },
          { title: "Related Post 3", description: "Description 3" },
        ],
      };
    });
    ```

2.  **Define Route with Loader:** In your route file, use the `loader` property.

    ```typescript
    // src/routes/about.tsx
    import { createFileRoute } from "@tanstack/react-router";
    import { useLoaderData } from "@tanstack/react-router"; // Import useLoaderData

    export const Route = createFileRoute("/about")({
      component: RouteComponent,
      // Loader function: Calls our server function
      loader: async () => {
        console.log("Route loader executing...");
        const data = await loaderFn(); // Call the server function
        return data; // Return the fetched data
      },
    });

    // Component to display related posts
    function RelatedPosts() {
      // Access data fetched by the route's loader
      const data = Route.useLoaderData(); // Use the specific Route's hook

      return (
        <aside className="w-80 shrink-0 bg-gray-800 p-6 rounded-lg">
          <h2 className="text-xl font-semibold mb-4">Related Posts</h2>
          <div className="space-y-4">
            {data.relatedPosts.map((post) => (
              <div
                key={post.title}
                className="border-b border-gray-700 last:border-0 pb-4 last:pb-0"
              >
                <h3 className="text-lg font-medium text-white mb-2">
                  {post.title}
                </h3>
                <p className="text-gray-400 text-sm">{post.description}</p>
              </div>
            ))}
          </div>
        </aside>
      );
    }

    // Main route component
    function RouteComponent() {
      return (
        <div className="flex gap-8">
          <article className="flex-1">
            <h1 className="text-4xl font-bold mb-4">
              The Future of Web Development
            </h1>
            {/* ... other blog content ... */}
          </article>
          {/* Render the RelatedPosts component */}
          <RelatedPosts />
        </div>
      );
    }
    ```

**Result:** When navigating to `/about`, the page will pause for 2 seconds (due to our simulated delay) before rendering the entire content, including the related posts.

---

## Method 2: Suspense (`useSuspenseQuery`)

This approach leverages React's built-in `<Suspense>` component and TanStack Query's `useSuspenseQuery` hook for a better loading UX.

**Concept:**

*   The main page component (`RouteComponent`) renders *immediately*.
*   The component responsible for fetching data (`RelatedPosts`) is wrapped in a `<Suspense>` boundary.
*   The `<Suspense>` boundary shows a `fallback` UI (e.g., a spinner or skeleton) while the data is loading.
*   Inside `RelatedPosts`, `useSuspenseQuery` is used. This hook integrates with Suspense: it *suspends* rendering of the component until data is ready, triggering the nearest `<Suspense>` fallback.
*   Data fetching happens on the client-side (or potentially streamed from the server depending on TanStack Start/Query setup).

**Pros:**

*   **Better UX:** The main page content loads instantly. Users see immediate feedback (the page structure and a loading indicator for the pending section).
*   **Granular Loading States:** Only the part of the UI waiting for data shows a loader.
*   **Streaming Potential:** Works well with SSR streaming capabilities.

**Cons:**

*   **Client-Side Fetching (typically):** Data might not be present in the *initial* HTML source sent from the server (unless specific pre-fetching strategies are used), which *could* be less ideal for critical SEO content compared to the `loader` method.
*   Requires structuring components with Suspense boundaries.

**Implementation:**

1.  **Remove/Comment Loader from Route:** The route itself no longer needs to block on this data.

    ```typescript
    // src/routes/about.tsx
    import { createFileRoute } from "@tanstack/react-router";
    import React, { Suspense } from "react"; // Import Suspense
    import { useSuspenseQuery } from "@tanstack/react-query"; // Import useSuspenseQuery

    // Define the server function (loaderFn) as in Method 1...

    // Route definition WITHOUT the loader for relatedPosts
    export const Route = createFileRoute("/about")({
      component: RouteComponent,
      // loader: async () => { /* ... potentially load OTHER essential data ... */ }
    });

    // Component to display related posts (modified)
    function RelatedPosts() {
      // Use useSuspenseQuery
      const { data } = useSuspenseQuery({
        queryKey: ["relatedPosts"], // Unique key for this query
        queryFn: () => loaderFn(), // Call the server function to fetch data
      });

      // Data is guaranteed to be available here because Suspense handles loading
      return (
        <div className="space-y-4">
          {data.relatedPosts.map((post) => (
             <div
                key={post.title}
                className="border-b border-gray-700 last:border-0 pb-4 last:pb-0"
              >
                <h3 className="text-lg font-medium text-white mb-2">
                  {post.title}
                </h3>
                <p className="text-gray-400 text-sm">{post.description}</p>
              </div>
          ))}
        </div>
      );
    }

    // Main route component (modified)
    function RouteComponent() {
      return (
        <div className="flex gap-8">
          <article className="flex-1">
             <h1 className="text-4xl font-bold mb-4">
              The Future of Web Development
            </h1>
            {/* ... other blog content ... */}
          </article>

          {/* Wrap RelatedPosts in Suspense */}
          <aside className="w-80 shrink-0 bg-gray-800 p-6 rounded-lg">
             <h2 className="text-xl font-semibold mb-4">Related Posts</h2>
             <Suspense fallback={<div className="text-center py-8">Loading...</div>}>
               <RelatedPosts />
             </Suspense>
          </aside>
        </div>
      );
    }
    ```

**Result:** When navigating to `/about`, the main blog content and the "Related Posts" title appear instantly. A "Loading..." message shows in the related posts section for 2 seconds, then it's replaced by the actual post list.

---

## Method 3: Standard Query (`useQuery`)

This is the traditional TanStack Query (React Query) approach, primarily for client-side data fetching and manual loading state management.

**Concept:**

*   Similar to Suspense, the main page renders immediately.
*   Inside the `RelatedPosts` component, the standard `useQuery` hook is used.
*   `useQuery` provides explicit loading (`isLoading`, `isFetching`) and error states (`isError`, `error`) that you must handle manually in your component's rendering logic.
*   Data fetching happens on the client-side after the component mounts.

**Pros:**

*   **Maximum Flexibility:** Full control over loading, error, and idle states within the component.
*   **Familiar Pattern:** Well-understood by developers already using React Query/TanStack Query in SPAs.
*   **Good for Non-Critical/Background Data:** Excellent for data that can load after the main content is visible without needing Suspense features.

**Cons:**

*   **Manual State Handling:** Requires explicit checks (`if (isLoading)`, `if (isError)`) in the JSX, which can add boilerplate.
*   **Client-Side Fetching:** Same potential SEO drawback as the Suspense method if data isn't pre-fetched.
*   Can lead to layout shifts if loading/error states aren't handled carefully (e.g., using skeleton loaders).

**Implementation:**

1.  **Route Definition (No Loader):** Same as Method 2, the route doesn't need the loader for this data.
2.  **Modify Component for `useQuery`:**

    ```typescript
    // src/routes/about.tsx
    import { createFileRoute } from "@tanstack/react-router";
    import React from "react";
    import { useQuery } from "@tanstack/react-query"; // Import useQuery

    // Define the server function (loaderFn) as in Method 1...

    export const Route = createFileRoute("/about")({
      component: RouteComponent,
    });

    // Component to display related posts (modified for useQuery)
    function RelatedPosts() {
      // Use useQuery
      const { data, isLoading, isError, error } = useQuery({
        queryKey: ["relatedPosts"], // Unique key
        queryFn: () => loaderFn(),   // Fetch function
      });

      // Manual Loading State Handling
      if (isLoading) {
        // Example Skeleton Loader
        return (
          <div className="space-y-4 animate-pulse">
            {[1, 2, 3].map((i) => (
              <div key={i} className="border-b border-gray-700 last:border-0 pb-4 last:pb-0">
                <div className="h-6 bg-gray-700 rounded w-3/4 mb-2"></div> {/* Title Skel */}
                <div className="h-4 bg-gray-700 rounded w-full"></div>   {/* Desc Skel */}
              </div>
            ))}
          </div>
        );
      }

      // Manual Error State Handling
      if (isError) {
        return <div className="text-red-500">Error loading posts: {error.message}</div>;
      }

      // Render Data (add optional chaining ?. just in case data is undefined briefly)
      return (
        <div className="space-y-4">
          {data?.relatedPosts.map((post) => (
             <div
                key={post.title}
                className="border-b border-gray-700 last:border-0 pb-4 last:pb-0"
              >
                <h3 className="text-lg font-medium text-white mb-2">
                  {post.title}
                </h3>
                <p className="text-gray-400 text-sm">{post.description}</p>
              </div>
          ))}
        </div>
      );
    }

    // Main route component (No Suspense needed unless used elsewhere)
    function RouteComponent() {
       return (
        <div className="flex gap-8">
          <article className="flex-1">
             <h1 className="text-4xl font-bold mb-4">
              The Future of Web Development
            </h1>
            {/* ... other blog content ... */}
          </article>
          <aside className="w-80 shrink-0 bg-gray-800 p-6 rounded-lg">
             <h2 className="text-xl font-semibold mb-4">Related Posts</h2>
             {/* Render RelatedPosts directly */}
             <RelatedPosts />
          </aside>
        </div>
      );
    }
    ```

**Result:** Similar to Suspense, the main content loads instantly. The related posts section shows a skeleton loader for 2 seconds, then displays the fetched posts.

---

## Summary & Choosing an Approach

*   **Use `loader`:** When data *must* be available for the initial render (critical for content, SEO), and a slightly longer initial load time is acceptable. Good for primary page content.
*   **Use `useSuspenseQuery` + `<Suspense>`:** When you want a better loading UX for non-critical sections of the page. The page loads instantly, and loading fallbacks are shown for parts fetching data. Integrates well with React's concurrent features. Often the preferred method for secondary content or data loaded after initial interaction.
*   **Use `useQuery`:** When you need fine-grained control over loading/error states or are integrating with existing client-side fetching patterns. Suitable for background fetches or when Suspense isn't desired/needed for a specific component.

Knowing all three allows you to mix and match strategies within your TanStack Start application for the best performance and user experience.

---

**Further Learning:**

*   Check out the official [TanStack Router Docs](https://tanstack.com/router/latest/docs/overview)
*   Explore the [TanStack Query Docs](https://tanstack.com/query/latest/docs/react/overview)
*   Join the community Discord (link mentioned in the video, usually found on TanStack websites).

Happy Coding!
======= postcss.config.mjs ======= with the path ./postcss.config.mjs
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

======= api.ts ======= with the path ./src/api.ts
import {
  createStartAPIHandler,
  defaultAPIFileRouteHandler,
} from '@tanstack/react-start/api'

export default createStartAPIHandler(defaultAPIFileRouteHandler)

======= AuthContext.tsx ======= with the path ./src/auth/AuthContext.tsx
// src/auth/AuthContext.tsx
import React, { createContext, useContext, useEffect, useState, useCallback, useRef, ReactNode } from 'react'
import { checkAuthFn, logoutFn } from '~/routes/_authed/-server'
import { useRouter } from '@tanstack/react-router'
import { useToast } from '~/hooks/use-toast'

type User = {
  id: string
  email?: string
  created_at: string
}

interface AuthContextType {
  user: User | null
  loading: boolean
  loggingOut: boolean
  refreshAuth: () => Promise<void>
  logout: () => Promise<void>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)
  const [loggingOut, setLoggingOut] = useState(false)
  const router = useRouter()
  const { toast } = useToast()

  const refreshTimer = useRef<number | undefined>(undefined)

  const clearTimer = useCallback(() => {
    if (refreshTimer.current !== undefined) {
      clearTimeout(refreshTimer.current)
      refreshTimer.current = undefined
    }
  }, [])

  const scheduleRefresh = useCallback(
    (expires_at: number) => {
      clearTimer()
      const now = Date.now() / 1000
      const ms = (expires_at - now - 60) * 1000
      refreshTimer.current = window.setTimeout(refreshAuth, Math.max(ms, 30_000))
    },
    [clearTimer],
  )

  const refreshAuth = useCallback(async () => {
    setLoading(true)
    try {
      const response = await checkAuthFn()
      if (response.error || !response.user) {
        setUser(null)
        clearTimer()
        toast({ title: 'Session expired', description: 'Please log in again.', variant: 'destructive' })
        await router.navigate({ to: '/login', search: { redirect: undefined }, replace: true })
      } else {
        setUser(response.user)
        const anyResp = response as any
        if (anyResp.data?.session?.expires_at) {
          scheduleRefresh(anyResp.data.session.expires_at)
        }
      }
    } catch (err) {
      console.error('Auth refresh error', err)
      setUser(null)
      clearTimer()
    } finally {
      setLoading(false)
    }
  }, [clearTimer, router, scheduleRefresh, toast])

  const logout = useCallback(async () => {
    if (loggingOut) return
    setLoggingOut(true)
    try {
      const res = await logoutFn()
      if (!res.error) {
        clearTimer()
        setUser(null)
        toast({ title: 'Logged out', description: 'You have been signed out.' })
        await router.invalidate()
        await router.navigate({ to: '/login', search: { redirect: undefined }, replace: true })
      } else {
        toast({ title: 'Logout failed', description: res.message ?? 'Try again.', variant: 'destructive' })
      }
    } finally {
      setLoggingOut(false)
    }
  }, [clearTimer, router, toast, loggingOut])

  useEffect(() => {
    refreshAuth()
    return clearTimer
  }, [refreshAuth, clearTimer])

  return (
    <AuthContext.Provider value={{ user, loading, loggingOut, refreshAuth, logout }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const ctx = useContext(AuthContext)
  if (!ctx) throw new Error('useAuth must be used within AuthProvider')
  return ctx
}

======= client.tsx ======= with the path ./src/client.tsx
/// <reference types="vinxi/types/client" />
import { hydrateRoot } from 'react-dom/client'
import { StartClient } from '@tanstack/react-start'
import { createRouter } from './router'

const router = createRouter()

hydrateRoot(document, <StartClient router={router} />)

======= Auth.tsx ======= with the path ./src/components/Auth.tsx
import { Button } from './ui/button'
import { Card } from './ui/card'
import { Input } from './ui/input'

interface AuthProps {
  actionText: string
  status: 'idle' | 'loading' | 'error' | 'success'
  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void
  afterSubmit?: React.ReactNode
  footer?: React.ReactNode
  message?: string
}

export function Auth({ actionText, status, onSubmit, afterSubmit, footer, message }: AuthProps) {
  return (
    <div className="min-h-screen flex items-center justify-center px-4">
      <Card className="w-full max-w-md p-6 space-y-6">
        <div className="text-center">
          <h1 className="text-2xl font-bold">
            {actionText === 'Login' ? 'Welcome back' : 'Create an account'}
          </h1>
          <p className="text-muted-foreground mt-2">
            {actionText === 'Login' ? 'Sign in to your account' : 'Sign up to get started'}
          </p>
        </div>

        <form onSubmit={onSubmit} className="space-y-4">
          <div className="space-y-2">
            <label htmlFor="email" className="text-sm font-medium">
              Email
            </label>
            <Input
              id="email"
              name="email"
              type="email"
              autoComplete="email"
              required
              placeholder="you@example.com"
            />
          </div>

          <div className="space-y-2">
            <label htmlFor="password" className="text-sm font-medium">
              Password
            </label>
            <Input
              id="password"
              name="password"
              type="password"
              autoComplete={actionText === 'Login' ? 'current-password' : 'new-password'}
              required
              placeholder="••••••••"
            />
          </div>

          <Button type="submit" className="w-full" disabled={status === 'loading'}>
            {status === 'loading'
              ? actionText === 'Login'
                ? 'Signing in...'
                : 'Creating account...'
              : actionText}
          </Button>
        </form>

        {afterSubmit}
        {message && (
          <div className="text-green-600 text-center mt-4" role="status">
            {message}
          </div>
        )}
        {footer}
      </Card>
    </div>
  )
}
======= DefaultCatchBoundary.tsx ======= with the path ./src/components/DefaultCatchBoundary.tsx
import {
  ErrorComponent,
  Link,
  rootRouteId,
  useMatch,
  useRouter,
} from '@tanstack/react-router'
import type { ErrorComponentProps } from '@tanstack/react-router'

export function DefaultCatchBoundary({ error }: ErrorComponentProps) {
  const router = useRouter()
  const isRoot = useMatch({
    strict: false,
    select: (state) => state.id === rootRouteId,
  })

  console.error('DefaultCatchBoundary Error:', error)

  return (
    <div className="min-w-0 flex-1 p-4 flex flex-col items-center justify-center gap-6">
      <ErrorComponent error={error} />
      <div className="flex gap-2 items-center flex-wrap">
        <button
          onClick={() => {
            router.invalidate()
          }}
          className={`px-2 py-1 bg-gray-600 dark:bg-gray-700 rounded text-white uppercase font-extrabold`}
        >
          Try Again
        </button>
        {isRoot ? (
          <Link
            to="/"
            className={`px-2 py-1 bg-gray-600 dark:bg-gray-700 rounded text-white uppercase font-extrabold`}
          >
            Home
          </Link>
        ) : (
          <Link
            to="/"
            className={`px-2 py-1 bg-gray-600 dark:bg-gray-700 rounded text-white uppercase font-extrabold`}
            onClick={(e) => {
              e.preventDefault()
              window.history.back()
            }}
          >
            Go Back
          </Link>
        )}
      </div>
    </div>
  )
}

======= Footer.tsx ======= with the path ./src/components/Footer.tsx
export function Footer() {
  return (
    <footer className="bg-white border-t">
      <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
          {/* Product */}
          <div>
            <h3 className="text-sm font-semibold text-gray-400 tracking-wider uppercase">Product</h3>
            <div className="mt-4 space-y-4">
              <a href="#features" className="text-base text-gray-500 hover:text-gray-900 block">
                Features
              </a>
              <a href="#pricing" className="text-base text-gray-500 hover:text-gray-900 block">
                Pricing
              </a>
            </div>
          </div>

          {/* Company */}
          <div>
            <h3 className="text-sm font-semibold text-gray-400 tracking-wider uppercase">Company</h3>
            <div className="mt-4 space-y-4">
              <a href="#about" className="text-base text-gray-500 hover:text-gray-900 block">
                About
              </a>
              <a href="#blog" className="text-base text-gray-500 hover:text-gray-900 block">
                Blog
              </a>
            </div>
          </div>

          {/* Legal */}
          <div>
            <h3 className="text-sm font-semibold text-gray-400 tracking-wider uppercase">Legal</h3>
            <div className="mt-4 space-y-4">
              <a href="#privacy" className="text-base text-gray-500 hover:text-gray-900 block">
                Privacy
              </a>
              <a href="#terms" className="text-base text-gray-500 hover:text-gray-900 block">
                Terms
              </a>
            </div>
          </div>

          {/* Social */}
          <div>
            <h3 className="text-sm font-semibold text-gray-400 tracking-wider uppercase">Social</h3>
            <div className="mt-4 space-y-4">
              <a href="https://twitter.com" className="text-base text-gray-500 hover:text-gray-900 block">
                Twitter
              </a>
              <a href="https://github.com" className="text-base text-gray-500 hover:text-gray-900 block">
                GitHub
              </a>
            </div>
          </div>
        </div>
        <div className="mt-8 border-t border-gray-200 pt-8">
          <p className="text-base text-gray-400 text-center">
            &copy; {new Date().getFullYear()} SaaS Template. All rights reserved.
          </p>
        </div>
      </div>
    </footer>
  )
}
======= Nav.tsx ======= with the path ./src/components/Nav.tsx
import { Link, useLocation, useNavigate, useRouter } from '@tanstack/react-router';
import React, { useState, useCallback, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { HamburgerMenu } from './ui/hamburger-menu';
import { useAuth } from '~/auth/AuthContext';
import { useToast } from '~/hooks/use-toast';

// Animation variants
const menuVariants = {
  closed: {
    opacity: 0,
    height: 0,
    transition: {
      duration: 0.3,
      ease: "easeInOut"
    }
  },
  open: {
    opacity: 1,
    height: "auto",
    transition: {
      duration: 0.3,
      ease: "easeInOut"
    }
  }
};

const mobileLinkVariants = {
  closed: { opacity: 0, x: -10 },
  open: { opacity: 1, x: 0 },
};

interface NavLink {
  to?: string;
  label: string;
  onClick?: () => void;
  isScroll?: boolean;
  scrollTo?: string;
}

interface NavProps {
  isProtected?: boolean;
  links: NavLink[];
  logo?: string;
  rightButtons?: React.ReactNode;
}

export function Nav({ isProtected = false, links, logo = "SaaS Template", rightButtons }: NavProps) {
  const [isOpen, setIsOpen] = useState(false);
  const location = useLocation();
  const router = useRouter();
  const navigate = useNavigate();
  const { toast } = useToast();
  const navRef = useRef<HTMLDivElement>(null);

  const scrollToSection = useCallback((sectionId: string) => {
    const element = document.getElementById(sectionId);
    if (!element) return;

    const navHeight = navRef.current?.offsetHeight || 0;
    
    // Get the section's padding
    const sectionStyles = window.getComputedStyle(element);
    const paddingTop = parseInt(sectionStyles.paddingTop, 10);
    
    // Calculate position including the section's top padding
    const elementTop = element.getBoundingClientRect().top + window.pageYOffset;
    const targetPosition = elementTop - navHeight - 48; // Increased offset for better spacing

    window.scrollTo({
      top: targetPosition,
      behavior: 'smooth'
    });
  }, []);

  // Close mobile menu when route changes
  useEffect(() => {
    setIsOpen(false);
  }, [location.pathname]);

  // Handle scroll on hash change or initial load
  useEffect(() => {
    if (location.hash) {
      const id = location.hash.replace('#', '');
      scrollToSection(id);
    }
  }, [location.hash, scrollToSection]);

  const handleLinkClick = useCallback((link: NavLink, e?: React.MouseEvent) => {
    if (link.isScroll && link.scrollTo) {
      // Prevent default hash behavior
      e?.preventDefault();
      // Update URL hash without navigating
      window.history.pushState(null, '', `#${link.scrollTo}`);
      scrollToSection(link.scrollTo);
    }
    if (link.onClick) {
      link.onClick();
    }
    setIsOpen(false);
  }, [scrollToSection]);

  // Handle smooth scrolling for hash changes
  useEffect(() => {
    const handleHashChange = (e: HashChangeEvent) => {
      if (location.hash) {
        e.preventDefault();
        const id = location.hash.replace('#', '');
        scrollToSection(id);
      }
    };

    window.addEventListener('hashchange', handleHashChange);
    return () => window.removeEventListener('hashchange', handleHashChange);
  }, [location.hash, scrollToSection]);

  return (
    <>
      {/* Backdrop overlay */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => setIsOpen(false)}
          />
        )}
      </AnimatePresence>

      <nav ref={navRef} className="bg-white shadow-sm sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          {/* Left Side: Logo and Desktop Links */}
          <div className="flex">
            {/* Logo */}
            <div className="flex-shrink-0 flex items-center">
              <Link to="/" className="text-xl font-bold text-gray-800">
                {logo}
              </Link>
            </div>

            {/* Desktop Navigation Links */}
            <div className="hidden md:ml-6 md:flex md:space-x-8">
              {links.map((link, index) => (
                link.to ? (
                  <Link
                    key={index}
                    to={link.to}
                    className="inline-flex items-center px-1 pt-1 text-sm font-medium text-gray-500 hover:text-gray-700"
                    activeProps={{
                      className: 'inline-flex items-center px-1 pt-1 text-sm font-medium border-b-2 border-indigo-500 text-gray-900',
                    }}
                    onClick={(e) => handleLinkClick(link, e)}
                  >
                    {link.label}
                  </Link>
                ) : (
                  <button
                    key={index}
                    onClick={(e) => handleLinkClick(link, e)}
                    className="inline-flex items-center px-1 pt-1 text-sm font-medium text-gray-500 hover:text-gray-700"
                  >
                    {link.label}
                  </button>
                )
              ))}
            </div>
          </div>

          {/* Right Side */}
          <div className="flex items-center">
            {/* Desktop Right Buttons */}
            <div className="hidden sm:flex sm:items-center sm:space-x-4">
              {rightButtons}
            </div>

            {/* Mobile menu button */}
            <div className="ml-4 flex items-center md:hidden">
              <HamburgerMenu
                isOpen={isOpen}
                onClick={() => setIsOpen(!isOpen)}
                className="text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 rounded-md p-0.5"
                aria-controls="mobile-menu"
                aria-expanded={isOpen}
              />
            </div>
          </div>
        </div>
      </div>

      {/* Mobile menu */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
              className="md:hidden absolute left-0 right-0 bg-white border-t border-gray-200 shadow-lg z-50"
            initial="closed"
            animate="open"
            exit="closed"
            variants={menuVariants}
          >
            {/* Primary Links */}
            <motion.div
              className="pt-2 pb-3 space-y-1 px-2"
              variants={{
                open: { transition: { staggerChildren: 0.07, delayChildren: 0.1 } },
                closed: { transition: { staggerChildren: 0.05, staggerDirection: -1 } }
              }}
            >
              {links.map((link, index) => (
                <motion.div key={index} variants={mobileLinkVariants}>
                  {link.to ? (
                    <Link
                      to={link.to}
                      className="block pl-3 pr-4 py-2 text-base font-medium text-gray-500 hover:text-gray-900 hover:bg-gray-50"
                      activeProps={{
                        className: 'block pl-3 pr-4 py-2 text-base font-medium text-indigo-700 bg-indigo-50 border-l-4 border-indigo-500',
                      }}
                      onClick={(e) => handleLinkClick(link, e)}
                    >
                      {link.label}
                    </Link>
                  ) : (
                    <button
                      onClick={(e) => handleLinkClick(link, e)}
                      className="block w-full text-left pl-3 pr-4 py-2 text-base font-medium text-gray-500 hover:text-gray-900 hover:bg-gray-50"
                    >
                      {link.label}
                    </button>
                  )}
                </motion.div>
              ))}
            </motion.div>

            {/* Mobile Right Buttons */}
            <motion.div
              className="pt-4 pb-3 border-t border-gray-200"
              variants={{
                open: { opacity: 1, transition: { delay: 0.2 } },
                closed: { opacity: 0 }
              }}
            >
              <div className="px-4 py-2 flex items-center justify-center space-x-4">
                {rightButtons}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </nav>
    </>
  );
}
======= NotFound.tsx ======= with the path ./src/components/NotFound.tsx
import { Link } from '@tanstack/react-router'

export function NotFound({ children }: { children?: any }) {
  return (
    <div className="space-y-2 p-2">
      <div className="text-gray-600 dark:text-gray-400">
        {children || <p>The page you are looking for does not exist.</p>}
      </div>
      <p className="flex items-center gap-2 flex-wrap">
        <button
          onClick={() => window.history.back()}
          className="bg-emerald-500 text-white px-2 py-1 rounded uppercase font-black text-sm"
        >
          Go back
        </button>
        <Link
          to="/"
          className="bg-cyan-600 text-white px-2 py-1 rounded uppercase font-black text-sm"
        >
          Start Over
        </Link>
      </p>
    </div>
  )
}

======= PostError.tsx ======= with the path ./src/components/PostError.tsx
import { ErrorComponent, ErrorComponentProps } from '@tanstack/react-router'

export function PostErrorComponent({ error }: ErrorComponentProps) {
  return <ErrorComponent error={error} />
}

======= ProtectedNav.tsx ======= with the path ./src/components/ProtectedNav.tsx
import { Nav } from './Nav';
import { useAuth } from '~/auth/AuthContext';
import { getCredits } from '~/routes/_authed/-server';
import { useQuery } from '@tanstack/react-query';

export function ProtectedNav() {
  const { logout } = useAuth();

  const links = [
    { to: '/app/dashboard', label: 'Dashboard' },
    { to: '/app/alerts', label: 'Alerts' },
    { to: '/app/settings', label: 'Settings' },
    { to: '/app/billing', label: 'Billing' }
  ];

  const { data: creditsData, isLoading, error } = useQuery({
    queryKey: ['credits'],
    queryFn: () => getCredits(),
  });

  const rightButtons = (
    <div className="flex items-center space-x-4">
      <div className="px-3 py-2 bg-gray-100 rounded-md">
        <span className="text-sm font-medium text-gray-700">
          {isLoading ? (
            <div className="flex items-center">
              <svg className="animate-spin h-4 w-4 mr-2" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
              </svg>
              Loading...
            </div>
          ) : error ? (
            <div className="text-red-600">Error loading credits</div>
          ) : (
            `Credits: ${creditsData?.credits || 0}`
          )}
        </span>
      </div>
      <button
        onClick={logout}
        className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        Sign out
      </button>
    </div>
  );

  return (
    <Nav
      isProtected={true}
      links={links}
      rightButtons={rightButtons}
      logo="Dashboard"
    />
  );
}
======= PublicNav.tsx ======= with the path ./src/components/PublicNav.tsx
import { Link } from '@tanstack/react-router';
import { Nav } from './Nav';
import { useAuth } from '~/auth/AuthContext';

export function PublicNav() {
  const { user, loading, logout } = useAuth();

  const links = [
    { to: '/', label: 'Home' },
    { label: 'Features', isScroll: true, scrollTo: 'features' },
    { label: 'Pricing', isScroll: true, scrollTo: 'pricing' }
  ];

  const loadingButtons = (
    <>
      <div className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md bg-gray-100 animate-pulse w-20 h-9" />
      <div className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md bg-gray-100 animate-pulse w-24 h-9" />
    </>
  );

  const authenticatedButtons = (
    <>
      <Link
        to="/app"
        className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 hover:scale-105 transform transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        <span className="flex items-center">
          Go to App
          <svg className="ml-1.5 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
          </svg>
        </span>
      </Link>
      <button
        onClick={logout}
        className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        Sign out
      </button>
    </>
  );

  const unauthenticatedButtons = (
    <>
      <Link
        to="/login"
        search={{ redirect: undefined }}
        className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-gray-500 hover:text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        Sign in
      </Link>
      <Link
        to="/register"
        className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        Get Started
      </Link>
    </>
  );

  const rightButtons = loading
    ? loadingButtons
    : user
      ? authenticatedButtons 
      : unauthenticatedButtons;

  return (
    <Nav
      links={links}
      rightButtons={rightButtons}
      logo="SaaS Template"
    />
  );
}
======= UserError.tsx ======= with the path ./src/components/UserError.tsx
import { ErrorComponent, ErrorComponentProps } from '@tanstack/react-router'

export function UserErrorComponent({ error }: ErrorComponentProps) {
  return <ErrorComponent error={error} />
}

======= accordion.tsx ======= with the path ./src/components/ui/accordion.tsx
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

======= alert-dialog.tsx ======= with the path ./src/components/ui/alert-dialog.tsx
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

======= alert.tsx ======= with the path ./src/components/ui/alert.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

======= aspect-ratio.tsx ======= with the path ./src/components/ui/aspect-ratio.tsx
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

======= avatar.tsx ======= with the path ./src/components/ui/avatar.tsx
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

======= badge.tsx ======= with the path ./src/components/ui/badge.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

======= breadcrumb.tsx ======= with the path ./src/components/ui/breadcrumb.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

======= button.tsx ======= with the path ./src/components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "../../lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

======= calendar.tsx ======= with the path ./src/components/ui/calendar.tsx
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };

======= card.tsx ======= with the path ./src/components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

======= carousel.tsx ======= with the path ./src/components/ui/carousel.tsx
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

======= chart.tsx ======= with the path ./src/components/ui/chart.tsx
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

======= checkbox.tsx ======= with the path ./src/components/ui/checkbox.tsx
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

======= collapsible.tsx ======= with the path ./src/components/ui/collapsible.tsx
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

======= command.tsx ======= with the path ./src/components/ui/command.tsx
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

======= context-menu.tsx ======= with the path ./src/components/ui/context-menu.tsx
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

======= dialog.tsx ======= with the path ./src/components/ui/dialog.tsx
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

======= drawer.tsx ======= with the path ./src/components/ui/drawer.tsx
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

======= dropdown-menu.tsx ======= with the path ./src/components/ui/dropdown-menu.tsx
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

======= form.tsx ======= with the path ./src/components/ui/form.tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

======= hamburger-menu.tsx ======= with the path ./src/components/ui/hamburger-menu.tsx
import { motion } from 'framer-motion';
import { cn } from '~/lib/utils'; // Assuming this utility exists for class names

interface HamburgerMenuProps {
  isOpen: boolean;
  onClick: () => void;
  className?: string;
}

/**
 * Hamburger Menu component animated using Framer Motion,
 * based on the visual style and animation of "ham8".
 */
export function HamburgerMenu({ isOpen, onClick, className }: HamburgerMenuProps) {
  const transition = { duration: 0.4 }; // Consistent transition duration

  return (
    <motion.svg
      className={cn('cursor-pointer select-none w-10 h-10', className)}
      viewBox="0 0 100 100"
      preserveAspectRatio="xMidYMid meet"
      onClick={onClick}
      initial={false} // Don't animate on initial load
      animate={isOpen ? 'active' : 'inactive'}
      variants={{
        inactive: { rotate: 0 },
        active: { rotate: 45 }, // Overall rotation for the 'X' shape, matching .hamRotate.active
      }}
      transition={transition}
      style={{
        WebkitTapHighlightColor: 'transparent',
        userSelect: 'none', // Standard vendor prefixes for user-select might be needed depending on target browsers
        // MozUserSelect: 'none', // Example for Firefox if needed
        // msUserSelect: 'none', // Example for IE/Edge if needed
      }}
    >
      {/* Top line */}
      <motion.path
        className="line top"
        fill="none"
        stroke="currentColor"
        strokeWidth="5.5" // Matches CSS
        strokeLinecap="round" // Matches CSS
        // ham8 path data for the top line
        d="m 30,33 h 40 c 3.722839,0 7.5,3.126468 7.5,8.578427 0,5.451959 -2.727029,8.421573 -7.5,8.421573 h -20"
        variants={{
          // Matches .ham8 .top { stroke-dasharray: 40 160; }
          inactive: { strokeDasharray: '40 160', strokeDashoffset: 0 },
          // Matches .ham8.active .top { stroke-dashoffset: -64px; }
          active: { strokeDasharray: '40 160', strokeDashoffset: -64 },
        }}
        transition={transition}
      />
      {/* Middle line */}
      <motion.path
        className="line middle"
        fill="none"
        stroke="currentColor"
        strokeWidth="5.5" // Matches CSS
        strokeLinecap="round" // Matches CSS
        // ham8 path data for the middle line
        d="m 30,50 h 40"
        variants={{
          // Matches .ham8 .middle { stroke-dasharray: 40 142; }
          inactive: {
            strokeDasharray: '40 142',
            rotate: 0, // Initial state: no rotation
          },
          // Matches .ham8.active .middle { transform: rotate(90deg); }
          active: {
            strokeDasharray: '40 142',
            rotate: 90, // Rotates 90 degrees
          },
        }}
        transition={transition} // Uses the same duration
        style={{
          transformOrigin: '50% 50%', // Ensure rotation is centered, matches CSS transform-origin
        }}
      />
      {/* Bottom line */}
      <motion.path
        className="line bottom"
        fill="none"
        stroke="currentColor"
        strokeWidth="5.5" // Matches CSS
        strokeLinecap="round" // Matches CSS
        // ham8 path data for the bottom line
        d="m 70,67 h -40 c 0,0 -7.5,-0.802118 -7.5,-8.365747 0,-7.563629 7.5,-8.634253 7.5,-8.634253 h 20"
        variants={{
          // Matches .ham8 .bottom { stroke-dasharray: 40 85; }
          inactive: { strokeDasharray: '40 85', strokeDashoffset: 0 },
          // Matches .ham8.active .bottom { stroke-dashoffset: -64px; }
          active: { strokeDasharray: '40 85', strokeDashoffset: -64 },
        }}
        transition={transition} // Uses the same duration
        style={{
            transformOrigin: '50% 50%', // Matches CSS transform-origin
          }}
      />
    </motion.svg>
  );
}
======= hover-card.tsx ======= with the path ./src/components/ui/hover-card.tsx
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

======= input-otp.tsx ======= with the path ./src/components/ui/input-otp.tsx
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

======= input.tsx ======= with the path ./src/components/ui/input.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

======= label.tsx ======= with the path ./src/components/ui/label.tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

======= menubar.tsx ======= with the path ./src/components/ui/menubar.tsx
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

======= navigation-menu.tsx ======= with the path ./src/components/ui/navigation-menu.tsx
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

======= pagination.tsx ======= with the path ./src/components/ui/pagination.tsx
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

======= popover.tsx ======= with the path ./src/components/ui/popover.tsx
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

======= progress.tsx ======= with the path ./src/components/ui/progress.tsx
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

======= radio-group.tsx ======= with the path ./src/components/ui/radio-group.tsx
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

======= resizable.tsx ======= with the path ./src/components/ui/resizable.tsx
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

======= scroll-area.tsx ======= with the path ./src/components/ui/scroll-area.tsx
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

======= select.tsx ======= with the path ./src/components/ui/select.tsx
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

======= separator.tsx ======= with the path ./src/components/ui/separator.tsx
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

======= sheet.tsx ======= with the path ./src/components/ui/sheet.tsx
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}


======= sidebar.tsx ======= with the path ./src/components/ui/sidebar.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

======= skeleton.tsx ======= with the path ./src/components/ui/skeleton.tsx
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

======= slider.tsx ======= with the path ./src/components/ui/slider.tsx
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

======= sonner.tsx ======= with the path ./src/components/ui/sonner.tsx
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

======= switch.tsx ======= with the path ./src/components/ui/switch.tsx
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

======= table.tsx ======= with the path ./src/components/ui/table.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

======= tabs.tsx ======= with the path ./src/components/ui/tabs.tsx
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

======= textarea.tsx ======= with the path ./src/components/ui/textarea.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

======= toast.tsx ======= with the path ./src/components/ui/toast.tsx
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed bottom-0 z-[100] flex max-h-screen w-full flex-col-reverse gap-2 p-4 sm:right-0 md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-3 overflow-hidden rounded-lg border bg-white/90 backdrop-blur-sm p-3 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-bottom-full dark:bg-gray-800/90 sm:p-4 sm:pr-8",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-0.5 top-0.5 rounded-md p-1 text-gray-500/90 opacity-100 transition-opacity hover:text-gray-900 focus:opacity-100 focus:outline-none focus:ring-2 focus:ring-indigo-500 group-[.destructive]:text-red-300/90 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 dark:text-gray-400/90 dark:hover:text-gray-50 sm:right-1 sm:top-1 sm:p-1.5",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold text-gray-900 dark:text-gray-100", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm text-gray-500 dark:text-gray-400", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

======= toaster.tsx ======= with the path ./src/components/ui/toaster.tsx
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "~/components/ui/toast"
import { useToast } from "~/hooks/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1.5">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
              {action && (
                <div className="mt-2 flex items-center space-x-2">
                  {action}
                </div>
              )}
            </div>
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

======= toggle-group.tsx ======= with the path ./src/components/ui/toggle-group.tsx
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

======= toggle.tsx ======= with the path ./src/components/ui/toggle.tsx
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

======= tooltip.tsx ======= with the path ./src/components/ui/tooltip.tsx
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

======= use-toast.ts ======= with the path ./src/components/ui/use-toast.ts
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };

======= global-middleware.ts ======= with the path ./src/global-middleware.ts
import { registerGlobalMiddleware } from '@tanstack/react-start'
import { logMiddleware } from './utils/loggingMiddleware'

registerGlobalMiddleware({
  middleware: [logMiddleware],
})

======= use-toast.ts ======= with the path ./src/hooks/use-toast.ts
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "~/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
======= useLocalStorage.ts ======= with the path ./src/hooks/useLocalStorage.ts
import { useState, useEffect } from 'react'

export function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {
  // Get from local storage then
  // parse stored json or return initialValue
  const readValue = () => {
    // Prevent build error on server
    if (typeof window === 'undefined') {
      return initialValue
    }

    try {
      const item = window.localStorage.getItem(key)
      return item ? JSON.parse(item) : initialValue
    } catch (error) {
      console.warn(`Error reading localStorage key "${key}":`, error)
      return initialValue
    }
  }

  // State to store our value
  // Pass initial state function to useState so logic is only executed once
  const [storedValue, setStoredValue] = useState<T>(readValue)

  // Return a wrapped version of useState's setter function that ...
  // ... persists the new value to localStorage.
  const setValue = (value: T) => {
    try {
      // Allow value to be a function so we have the same API as useState
      const valueToStore = value instanceof Function ? value(storedValue) : value
      // Save to local storage
      window.localStorage.setItem(key, JSON.stringify(valueToStore))
      // Save state
      setStoredValue(valueToStore)
    } catch (error) {
      console.warn(`Error setting localStorage key "${key}":`, error)
    }
  }

  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === key && e.newValue) {
        setStoredValue(JSON.parse(e.newValue))
      }
    }

    window.addEventListener('storage', handleStorageChange)
    return () => window.removeEventListener('storage', handleStorageChange)
  }, [key])

  return [storedValue, setValue]
}
======= useMutation.ts ======= with the path ./src/hooks/useMutation.ts
import * as React from 'react'

export function useMutation<TVariables, TData, TError = Error>(opts: {
  fn: (variables: TVariables) => Promise<TData>
  onSuccess?: (ctx: { data: TData }) => void | Promise<void>
}) {
  const [submittedAt, setSubmittedAt] = React.useState<number | undefined>()
  const [variables, setVariables] = React.useState<TVariables | undefined>()
  const [error, setError] = React.useState<TError | undefined>()
  const [data, setData] = React.useState<TData | undefined>()
  const [status, setStatus] = React.useState<
    'idle' | 'pending' | 'success' | 'error'
  >('idle')

  const mutate = React.useCallback(
    async (variables: TVariables): Promise<TData | undefined> => {
      setStatus('pending')
      setSubmittedAt(Date.now())
      setVariables(variables)
      //
      try {
        const data = await opts.fn(variables)
        await opts.onSuccess?.({ data })
        setStatus('success')
        setError(undefined)
        setData(data)
        return data
      } catch (err: any) {
        setStatus('error')
        setError(err)
      }
    },
    [opts.fn],
  )

  return {
    status,
    variables,
    submittedAt,
    mutate,
    error,
    data,
  }
}

======= utils.ts ======= with the path ./src/lib/utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
======= authMiddleware.ts ======= with the path ./src/middleware/authMiddleware.ts
// src/middleware/authMiddleware.ts
import { createMiddleware } from '@tanstack/react-start';
import { checkAuth } from '../utils/supabase';
import type { User } from '@supabase/supabase-js';

export interface AuthContext {
  user: User;
  accessToken: string;
}

export const authMiddleware = createMiddleware()
  .server(async ({ next }) => {
    const auth = await checkAuth();

    if (!auth.user) {
      throw new Error('Unauthorized');
    }

    return next({
      context: {
        user: auth.user,
        accessToken: auth.accessToken
      } satisfies AuthContext,
    });
  });
======= router.tsx ======= with the path ./src/router.tsx
import { createRouter as createTanStackRouter } from '@tanstack/react-router'
import { routeTree } from './routeTree.gen'
import { DefaultCatchBoundary } from './components/DefaultCatchBoundary'
import { NotFound } from './components/NotFound'

export function createRouter() {
  const router = createTanStackRouter({
    routeTree,
    defaultPreload: 'intent',
    defaultErrorComponent: DefaultCatchBoundary,
    defaultNotFoundComponent: () => <NotFound />,
    scrollRestoration: true,
  })

  return router
}

declare module '@tanstack/react-router' {
  interface Register {
    router: ReturnType<typeof createRouter>
  }
}

======= __root.tsx ======= with the path ./src/routes/__root.tsx
import {
  HeadContent,
  Outlet,
  Scripts,
  createRootRoute,
  type RegisteredRouter,
} from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import * as React from 'react'
import { DefaultCatchBoundary } from '~/components/DefaultCatchBoundary'
import { NotFound } from '~/components/NotFound'
import { PublicNav } from '~/components/PublicNav'
import { Footer } from '~/components/Footer'
import { Toaster } from '~/components/ui/toaster'
import appCss from '~/styles/app.css?url'
import { seo } from '~/utils/seo'
import { AuthProvider } from '~/auth/AuthContext'

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      retry: 1,
    },
  },
})

export const Route = createRootRoute({
  context: () => ({
    queryClient,
  }),
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      ...seo({
        title: 'SaaS Template | Modern Web Application Starter',
        description: 'A modern SaaS template built with React, TanStack Router, and more.',
      }),
    ],
    links: [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ],
  }),
  errorComponent: (props) => {
    return (
      <RootDocument>
        <DefaultCatchBoundary {...props} />
      </RootDocument>
    )
  },
  notFoundComponent: () => <NotFound />,
  component: RootComponent,
})

function RootComponent() {
  return (
    <RootDocument>
      <QueryClientProvider client={queryClient}>
        <AuthProvider>
          <Outlet />
        </AuthProvider>
      </QueryClientProvider>
    </RootDocument>
  )
}

function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body className="min-h-screen flex flex-col">
        <main className="flex-1">
          {children}
        </main>
        <Toaster />
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}

======= -server.ts ======= with the path ./src/routes/_authed/-server.ts
import { createServerFn } from '@tanstack/react-start'
import { z } from 'zod'
import { getServerSupabase } from '~/utils/supabase'
import { authMiddleware } from '~/middleware/authMiddleware'

type LogoutResponse = {
  error: boolean
  message?: string
}

type AuthCheckResponse = {
  error: boolean
  message?: string
  user?: {
    id: string
    email: string | undefined
    created_at: string
  } | null
}

const authInputSchema = z.object({
  email: z.string().email('Invalid email address'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
})

type SerializableUser = {
  id: string
  email: string | undefined
  created_at: string
}

type SerializableSession = {
  access_token: string
  expires_at: number | undefined
  refresh_token: string
}

type AuthSuccessResponse = {
  error: false
  data: {
    user: SerializableUser | null
    session: SerializableSession | null
  }
}

type AuthErrorResponse = {
  error: true
  message: string
}

type AuthResponse = AuthSuccessResponse | AuthErrorResponse

export const loginFn = createServerFn({ method: 'POST' })
  .validator((data: unknown) => {
    return authInputSchema.parse(data)
  })
  .handler(async ({ data }): Promise<AuthResponse> => {
    const supabase = getServerSupabase()
    const { data: authData, error } = await supabase.auth.signInWithPassword({
      email: data.email,
      password: data.password,
    })

    if (error) {
      // Map Supabase error messages to more user-friendly messages
      let message = error.message
      switch (error.message) {
        case 'Invalid login credentials':
          message = 'Invalid email or password'
          break
        case 'Email not confirmed':
          message = 'Please confirm your email address before logging in'
          break
        case 'Invalid email or password':
          message = 'The email or password you entered is incorrect'
          break
      }
      
      return {
        error: true,
        message
      }
    }

    if (!authData.user?.email_confirmed_at) {
      return {
        error: true,
        message: 'Email not confirmed'
      }
    }

    return {
      error: false,
      data: {
        user: authData.user ? {
          id: authData.user.id,
          email: authData.user.email,
          created_at: authData.user.created_at,
        } : null,
        session: authData.session ? {
          access_token: authData.session.access_token,
          expires_at: authData.session.expires_at,
          refresh_token: authData.session.refresh_token,
        } : null,
      }
    }
  })

export const signupFn = createServerFn({ method: 'POST' })
  .validator((data: unknown) => {
    return authInputSchema.parse(data)
  })
  .handler(async ({ data }): Promise<AuthResponse> => {
    console.log('signupFn', data)
    const supabase = getServerSupabase()
    const { data: authData, error } = await supabase.auth.signUp({
      email: data.email,
      password: data.password,
      options: {
        emailRedirectTo: `${process.env.VITE_APP_URL}/login`,
      },
    })

    if (error) {
      console.error('Error signing up:', error)
      return {
        error: true,
        message: error.message,
      }
    }

    return {
      error: false,
      data: {
        user: authData.user ? {
          id: authData.user.id,
          email: authData.user.email,
          created_at: authData.user.created_at,
        } : null,
        session: authData.session ? {
          access_token: authData.session.access_token,
          expires_at: authData.session.expires_at,
          refresh_token: authData.session.refresh_token,
        } : null,
      }
    }
  })

export const logoutFn = createServerFn({ method: 'POST' })
  .handler(async (): Promise<LogoutResponse> => {
    const supabase = getServerSupabase()
    const { error } = await supabase.auth.signOut()

    if (error) {
      return {
        error: true,
        message: error.message
      }
    }

    return {
      error: false
    }
  })

type GetCreditsResponse = {
  error: boolean
  message?: string
  credits?: number
}

export const getCredits = createServerFn({ method: 'GET' })
  .middleware([authMiddleware])
  .handler(async ({context}): Promise<GetCreditsResponse> => {
    const user = context.user

    if (!user) {
      return {
        error: true,
        message: 'Not authenticated'
      }
    }

    // TODO: Replace with actual credits fetch from your backend using user.id
    // This is a mock implementation
    const mockCredits = 100

    return {
      error: false,
      credits: mockCredits
    }
  })

export const checkAuthFn = createServerFn({ method: 'GET' })
  .handler(async (): Promise<AuthCheckResponse> => {
    const supabase = getServerSupabase()
    const { data: { user }, error } = await supabase.auth.getUser()

    if (error) {
      return {
        error: true,
        message: error.message
      }
    }

    if (!user) {
      return {
        error: true,
        message: 'Not authenticated'
      }
    }

    return {
      error: false,
      user: {
        id: user.id,
        email: user.email,
        created_at: user.created_at
      }
    }
  })
  
  // Schema for credit spend input
  const creditSpendSchema = z.object({
    amount: z.number().min(1, 'Amount must be at least 1'),
    action: z.string().default('test_action')
  })
  
  type CreditSpendResponse = {
    error: boolean
    message?: string
    data?: {
      status: string
      credits_spent: number
      action: string
      remaining_balance: number
      transaction_id: string
      timestamp: string
    }
  }
  
  export const spendCreditsFn = createServerFn({ method: 'POST' })
    .middleware([authMiddleware])
    .validator((data: unknown) => {
      return creditSpendSchema.parse(data)
    })
    .handler(async ({ data, context }): Promise<CreditSpendResponse> => {
      try {
        const response = await fetch('http://localhost:8000/test/spend-credits', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${context.accessToken}`
          },
          body: JSON.stringify(data)
        })
  
        if (!response.ok) {
          const error = await response.json()
          return {
            error: true,
            message: error.detail || 'Failed to spend credits'
          }
        }
  
        const result = await response.json()
        return {
          error: false,
          data: result
        }
      } catch (error) {
        return {
          error: true,
          message: error instanceof Error ? error.message : 'An unknown error occurred'
        }
      }
    })
======= alerts.tsx ======= with the path ./src/routes/_authed/app/alerts.tsx
import { createFileRoute } from '@tanstack/react-router'
import { Card } from '~/components/ui/card'

export const Route = createFileRoute('/_authed/app/alerts')({
  component: AlertsPage,
})

function AlertsPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold tracking-tight">Alerts</h1>
        <p className="text-muted-foreground">
          Manage your notification preferences and view alerts.
        </p>
      </div>

      <Card className="p-6">
        <div className="text-sm text-muted-foreground">
          No alerts at this time.
        </div>
      </Card>
    </div>
  )
}

======= -server.ts ======= with the path ./src/routes/_authed/app/billing/-server.ts
import { createServerFn } from '@tanstack/react-start'
import { authMiddleware, type AuthContext } from '~/middleware/authMiddleware'
import { z } from 'zod'
import Stripe from 'stripe'

export type PlanTier = 'free' | 'pro' | 'enterprise'
export type BillingPeriod = 'monthly' | 'yearly'

interface PlanPrices {
  monthly: string | undefined
  yearly: string | undefined
}

// Only subscription tiers get price IDs here
const STRIPE_PRICE_IDS: Record<'pro' | 'enterprise', PlanPrices> = {
  pro: {
    monthly: process.env.STRIPE_PRICE_ID_PRO_MONTHLY,
    yearly: process.env.STRIPE_PRICE_ID_PRO_YEARLY,
  },
  enterprise: {
    monthly: process.env.STRIPE_PRICE_ID_ENT_MONTHLY,
    yearly: process.env.STRIPE_PRICE_ID_ENT_YEARLY,
  },
}

const CREDIT_PACK_PRICE_IDS = {
  small: process.env.STRIPE_PRICE_ID_CREDITS_SMALL,
  medium: process.env.STRIPE_PRICE_ID_CREDITS_MEDIUM,
  large: process.env.STRIPE_PRICE_ID_CREDITS_LARGE,
} as const

const stripeSecretKey = process.env.STRIPE_SECRET_KEY
if (!stripeSecretKey) {
  console.error('FATAL ERROR: STRIPE_SECRET_KEY is not set. Billing functionality will fail.')
}
const stripe = stripeSecretKey
  ? new Stripe(stripeSecretKey, { apiVersion: '2023-10-16' })
  : undefined

export interface BillingHistoryItem {
  id: string
  date: string
  description: string
  amount: number
}

export interface BillingInfo {
  plan: {
    name: PlanTier
    billingPeriod: BillingPeriod
    amount: number
    nextPaymentDate: string | null
    status: string
  } | null
  paymentMethod: {
    brand: string | null
    cardLast4: string | null
    expiryDate: string | null
  } | null
  history: BillingHistoryItem[]
}

export const getBillingInfo = createServerFn({ method: 'GET' })
  .middleware([authMiddleware])
  .handler(async ({ context }): Promise<BillingInfo> => {
    console.log('getBillingInfo: User email:', context.user?.email)
    console.log('getBillingInfo: AccessToken length:', context.accessToken?.length ?? 0)

    // simulate fetch delay
    await new Promise((r) => setTimeout(r, 500))

    const mockPlan = {
      name: 'free' as const,
      billingPeriod: 'monthly' as const,
      amount: 0,
      nextPaymentDate: null,
      status: 'active',
    }

    const mockPaymentMethod = {
      brand: 'Visa',
      cardLast4: '4242',
      expiryDate: '04/2025',
    }

    const mockHistory: BillingHistoryItem[] = [
      { id: 'in_1', date: '2024-04-01', description: 'Pro Plan - Monthly', amount: 29.0 },
      { id: 'in_2', date: '2024-03-01', description: 'Pro Plan - Monthly', amount: 29.0 },
      { id: 'in_3', date: '2024-02-01', description: 'Pro Plan - Monthly', amount: 29.0 },
    ]

    return {
      plan: mockPlan,
      paymentMethod: mockPaymentMethod,
      history: mockHistory,
    }
  })

const createCheckoutSchema = z.object({
  plan: z.enum(['pro', 'enterprise']),
  billingPeriod: z.enum(['monthly', 'yearly']),
  successUrl: z.string().url(),
  cancelUrl: z.string().url(),
})

function getSubscriptionPriceId(
  plan: z.infer<typeof createCheckoutSchema>['plan'],
  billingPeriod: z.infer<typeof createCheckoutSchema>['billingPeriod'],
): string {
  const planConfig = STRIPE_PRICE_IDS[plan]
  const priceId = planConfig[billingPeriod]
  if (!priceId) {
    throw new Error(`Configuration error: Price ID for plan '${plan}' (${billingPeriod}) is missing.`)
  }
  return priceId
}

export type CheckoutSessionResult = {
  sessionId: string
  url: string
}

export const createCheckoutSession = createServerFn({ method: 'POST' })
  .middleware([authMiddleware])
  .validator((data): z.infer<typeof createCheckoutSchema> => createCheckoutSchema.parse(data))
  .handler(async ({ data, context }): Promise<CheckoutSessionResult> => {
    if (!stripe) throw new Error('Stripe is not initialized. Check STRIPE_SECRET_KEY.')
    if (!context.user?.email) throw new Error('User email is not available in context.')

    const priceId = getSubscriptionPriceId(data.plan, data.billingPeriod)
    console.log(`Creating checkout session for plan=${data.plan}, period=${data.billingPeriod}, priceId=${priceId}, user=${context.user.email}`)

    try {
      const session = await stripe.checkout.sessions.create({
        mode: 'subscription',
        payment_method_types: ['card'],
        line_items: [{ price: priceId, quantity: 1 }],
        success_url: `${data.successUrl}?session_id={CHECKOUT_SESSION_ID}`,
        cancel_url: data.cancelUrl,
        customer_email: context.user.email,
        metadata: { userId: context.user.id ?? 'unknown' },
      })
      console.log('Stripe session created:', session.id)
      if (!session.url) throw new Error('Stripe session was created but is missing the URL.')
      return { sessionId: session.id, url: session.url }
    } catch (err: unknown) {
      console.error('Stripe checkout session creation failed:', err)
      const message = err instanceof Error ? err.message : 'An unknown error occurred'
      throw new Error(`Failed to create checkout session: ${message}`)
    }
  })

export const createCreditsCheckoutSchema = z.object({
  packSize: z.enum(['small', 'medium', 'large']),
  successUrl: z.string().url(),
  cancelUrl: z.string().url(),
})

function getCreditPriceId(packSize: z.infer<typeof createCreditsCheckoutSchema>['packSize']): string {
  const priceId = CREDIT_PACK_PRICE_IDS[packSize]
  if (!priceId) {
    throw new Error(`Configuration error: Price ID for credit pack size '${packSize}' is missing.`)
  }
  return priceId
}

export const createCreditsCheckoutSession = createServerFn({ method: 'POST' })
  .middleware([authMiddleware])
  .validator((data): z.infer<typeof createCreditsCheckoutSchema> => createCreditsCheckoutSchema.parse(data))
  .handler(async ({ data, context }): Promise<CheckoutSessionResult> => {
    if (!stripe) throw new Error('Stripe is not initialized. Check STRIPE_SECRET_KEY.')
    if (!context.user?.email) throw new Error('User email is not available in context.')

    const priceId = getCreditPriceId(data.packSize)
    console.log(`Creating credits session for size=${data.packSize}, priceId=${priceId}, user=${context.user.email}`)

    try {
      const session = await stripe.checkout.sessions.create({
        mode: 'payment',
        payment_method_types: ['card'],
        line_items: [{ price: priceId, quantity: 1 }],
        success_url: `${data.successUrl}?session_id={CHECKOUT_SESSION_ID}`,
        cancel_url: data.cancelUrl,
        customer_email: context.user.email,
        metadata: { userId: context.user.id ?? 'unknown', packSize: data.packSize },
      })
      console.log('Stripe credits session created:', session.id)
      if (!session.url) throw new Error('Stripe session was created but is missing the URL.')
      return { sessionId: session.id, url: session.url }
    } catch (err: unknown) {
      console.error('Stripe credits checkout session creation failed:', err)
      const message = err instanceof Error ? err.message : 'An unknown error occurred'
      throw new Error(`Failed to create credits checkout session: ${message}`)
    }
  })

======= index.tsx ======= with the path ./src/routes/_authed/app/billing/index.tsx
import { createFileRoute } from '@tanstack/react-router'
import type { QueryClient } from '@tanstack/react-query'
import { Suspense, useState, type ReactElement } from 'react'
import { useSuspenseQuery, useMutation } from '@tanstack/react-query'
import {
  getBillingInfo,
  createCheckoutSession,
  createCreditsCheckoutSession,
  type BillingInfo,
  type PlanTier,
  type BillingPeriod,
  type CheckoutSessionResult,
  createCreditsCheckoutSchema,
} from './-server'
import { z } from 'zod'
import { Button } from '~/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '~/components/ui/card'
import { Skeleton } from '~/components/ui/skeleton'
import { Switch } from '~/components/ui/switch'
import { Label } from '~/components/ui/label'
import { toast } from '~/components/ui/use-toast'
import { cn } from '~/lib/utils'

const billingInfoQueryKey = ['billing-info']

export const Route = createFileRoute('/_authed/app/billing/')({
  loader: ({ context }) => {
    const queryClient = (context as { queryClient: QueryClient }).queryClient
    if (!queryClient) throw new Error('QueryClient not found in context')
    return queryClient.ensureQueryData({
      queryKey: billingInfoQueryKey,
      queryFn: getBillingInfo,
    })
  },
  component: BillingIndex,
  errorComponent: BillingError,
  pendingComponent: BillingSkeleton,
})

function BillingSkeleton() {
  return (
    <div className="bg-gray-50/50 px-4 py-8 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto space-y-8">
        <Skeleton className="h-12 w-64" />
        <div className="grid gap-8 lg:grid-cols-3">
          {[1, 2, 3].map((i) => (
            <Card key={i} className="bg-white border-0">
              <CardHeader className="pb-0">
                <Skeleton className="h-6 w-24 mb-2" />
                <Skeleton className="h-4 w-32" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-16 w-full mb-4" />
                <div className="space-y-2">
                  {[1, 2, 3].map((j) => (
                    <Skeleton key={j} className="h-4 w-full" />
                  ))}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  )
}

function BillingError({ error }: { error: Error }): ReactElement {
  return (
    <div className="flex items-center justify-center p-8">
      <Card className="max-w-md w-full bg-white border-0">
        <CardHeader>
          <CardTitle className="text-red-600">Unable to load billing information</CardTitle>
          <CardDescription>{error.message}</CardDescription>
        </CardHeader>
      </Card>
    </div>
  )
}

function BillingHistorySection(): ReactElement {
  const { data: billingInfo } = useSuspenseQuery({
    queryKey: billingInfoQueryKey,
    queryFn: getBillingInfo,
  })

  return (
    <div className="bg-white rounded-lg border border-gray-100">
      <div className="px-6 py-4 border-b border-gray-100">
        <h3 className="text-lg font-medium">Transaction History</h3>
      </div>
      <div className="divide-y divide-gray-100">
        {billingInfo.history.length === 0 ? (
          <div className="px-6 py-8 text-center text-gray-500">
            No transactions to display
          </div>
        ) : (
          billingInfo.history.map((item) => (
            <div key={item.id} className="px-6 py-4 flex items-center justify-between">
              <div>
                <div className="font-medium text-gray-900">{item.description}</div>
                <div className="text-sm text-gray-500">{item.date}</div>
              </div>
              <div className="font-medium">${item.amount.toFixed(2)}</div>
            </div>
          ))
        )}
      </div>
    </div>
  )
}

function CurrentPlanSection({ plan }: { plan: BillingInfo['plan'] }) {
  const [billingPeriod, setBillingPeriod] = useState<BillingPeriod>(
    plan?.billingPeriod === 'yearly' ? 'yearly' : 'monthly'
  )

  const checkoutMutation = useMutation<
    CheckoutSessionResult,
    Error,
    { plan: 'pro' | 'enterprise'; billingPeriod: BillingPeriod; successUrl: string; cancelUrl: string }
  >({
    mutationFn: async (data) => {
      const result = await createCheckoutSession({ data })
      return result
    },
    onSuccess: (result) => {
      if (result.url) {
        window.location.href = result.url
      } else {
        toast({
          title: 'Error',
          description: 'No redirect URL returned.',
          variant: 'destructive',
        })
      }
    },
    onError: (err) => {
      toast({
        title: 'Upgrade failed',
        description: err.message,
        variant: 'destructive',
      })
    },
  })

  const getNextTier = (): PlanTier | null => {
    const current = plan?.name.toLowerCase()
    if (!current || current === 'enterprise') return null
    return current === 'free' ? 'pro' : 'enterprise'
  }
  const nextTier = getNextTier()

  if (!plan) return null

  return (
    <div className="bg-white rounded-lg border border-gray-100">
      <div className="px-6 py-4 border-b border-gray-100">
        <h3 className="text-lg font-medium">Current Plan</h3>
      </div>
      <div className="px-6 py-4">
        <div className="flex items-center justify-between mb-6">
          <div>
            <div className="text-2xl font-semibold text-gray-900">{plan.name}</div>
            <div className="text-gray-500">${plan.amount}/month</div>
          </div>
          <div className={cn(
            "px-3 py-1 rounded-full text-sm font-medium",
            plan.status === 'active' 
              ? "bg-green-50 text-green-700" 
              : "bg-yellow-50 text-yellow-700"
          )}>
            {plan.status}
          </div>
        </div>

        <dl className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <dt className="text-sm text-gray-500">Billing Period</dt>
            <dd className="text-sm font-medium text-gray-900">{plan.billingPeriod}</dd>
          </div>
          <div>
            <dt className="text-sm text-gray-500">Next Payment</dt>
            <dd className="text-sm font-medium text-gray-900">{plan.nextPaymentDate || 'N/A'}</dd>
          </div>
        </dl>

        {nextTier && (
          <div className="mt-6 space-y-4">
            <div className="flex items-center justify-center space-x-4">
              <Label htmlFor="billing-period" className="text-sm">Monthly</Label>
              <Switch
                id="billing-period"
                checked={billingPeriod === 'yearly'}
                onCheckedChange={(checked) =>
                  setBillingPeriod(checked ? 'yearly' : 'monthly')
                }
              />
              <Label htmlFor="billing-period" className="text-sm">
                Yearly <span className="text-green-600">(Save 20%)</span>
              </Label>
            </div>
            <Button
              onClick={() =>
                checkoutMutation.mutate({
                  plan: nextTier as 'pro' | 'enterprise',
                  billingPeriod,
                  successUrl: `${window.location.origin}/app/billing?success=plan`,
                  cancelUrl: `${window.location.origin}/app/billing`,
                })
              }
              disabled={checkoutMutation.isPending}
              className="w-full"
              variant="outline"
              size="lg"
            >
              {checkoutMutation.isPending
                ? 'Processing…'
                : `Upgrade to ${nextTier.charAt(0).toUpperCase() + nextTier.slice(1)}`}
            </Button>
          </div>
        )}
      </div>
    </div>
  )
}

function BuyCreditsSection() {
  const [processingPack, setProcessingPack] = useState<'small' | 'medium' | 'large' | null>(null)

  const creditsMutation = useMutation<
    CheckoutSessionResult,
    Error,
    z.infer<typeof createCreditsCheckoutSchema>
  >({
    mutationFn: async (data) => {
      const result = await createCreditsCheckoutSession({ data })
      return result
    },
    onSuccess: (res) => {
      if (res.url) {
        window.location.href = res.url
      } else {
        toast({
          title: 'Error',
          description: 'No redirect URL returned.',
          variant: 'destructive',
        })
      }
    },
    onError: (err) => {
      toast({
        title: 'Purchase failed',
        description: err.message,
        variant: 'destructive',
      })
    },
    onSettled: () => setProcessingPack(null),
  })

  const creditPacks = [
    { size: 'small' as const, amount: 100, price: 10, description: 'Basic Pack' },
    { size: 'medium' as const, amount: 550, price: 50, description: 'Most Popular' },
    { size: 'large' as const, amount: 1200, price: 100, description: 'Best Value' },
  ]

  return (
    <div className="bg-white rounded-lg border border-gray-100">
      <div className="px-6 py-4 border-b border-gray-100">
        <h3 className="text-lg font-medium">Purchase Credits</h3>
        <p className="text-sm text-gray-500 mt-1">Add more credits to your account</p>
      </div>
      <div className="p-6">
        <div className="grid gap-6 lg:grid-cols-3">
          {creditPacks.map((pack) => {
            const isPopular = pack.size === 'medium'
            const isBestValue = pack.size === 'large'

            return (
              <div
                key={pack.size}
                className={cn(
                  "relative rounded-lg border p-6",
                  (isPopular || isBestValue) ? "border-blue-100" : "border-gray-100"
                )}
              >
                {(isPopular || isBestValue) && (
                  <div className="absolute -top-3 left-1/2 -translate-x-1/2">
                    <span className={cn(
                      "inline-block px-3 py-1 text-xs font-medium rounded-full",
                      isPopular ? "bg-blue-50 text-blue-700" : "bg-green-50 text-green-700"
                    )}>
                      {pack.description}
                    </span>
                  </div>
                )}

                <div className="text-center mb-6">
                  <div className="text-4xl font-bold text-gray-900">{pack.amount}</div>
                  <div className="text-sm text-gray-500 mt-1">Credits</div>
                </div>

                <div className="text-center mb-6">
                  <div className="text-3xl font-bold text-gray-900">${pack.price}</div>
                  <div className="text-sm text-gray-500 mt-1">
                    ${(pack.price / pack.amount).toFixed(2)} per credit
                  </div>
                </div>

                <Button
                  onClick={() => {
                    setProcessingPack(pack.size)
                    creditsMutation.mutate({
                      packSize: pack.size,
                      successUrl: `${window.location.origin}/app/billing?success=credits`,
                      cancelUrl: `${window.location.origin}/app/billing`,
                    })
                  }}
                  disabled={creditsMutation.isPending && processingPack === pack.size}
                  variant={isPopular || isBestValue ? 'default' : 'outline'}
                  className="w-full"
                  size="lg"
                >
                  {creditsMutation.isPending && processingPack === pack.size
                    ? 'Processing…'
                    : 'Purchase Credits'}
                </Button>
              </div>
            )
          })}
        </div>
      </div>
    </div>
  )
}

function BillingIndex() {
  const { data: billingInfo } = useSuspenseQuery({
    queryKey: billingInfoQueryKey,
    queryFn: getBillingInfo,
  })

  return (
    <div className="bg-gray-50/50 px-4 py-8 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto space-y-8">
        <div>
          <h1 className="text-2xl font-semibold text-gray-900">Billing</h1>
          <p className="mt-1 text-sm text-gray-500">Manage your subscription and credits</p>
        </div>

        <div className="grid gap-8 lg:grid-cols-2">
          <CurrentPlanSection plan={billingInfo.plan} />
          <BillingHistorySection />
        </div>

        <BuyCreditsSection />
      </div>
    </div>
  )
}

======= route.tsx ======= with the path ./src/routes/_authed/app/billing/route.tsx
import { Outlet, createFileRoute } from '@tanstack/react-router'
import { Suspense } from 'react'
import { useSuspenseQuery } from '@tanstack/react-query'
import { Card } from '~/components/ui/card'
import { getBillingInfo } from './-server'
import { Skeleton } from '~/components/ui/skeleton'

export const Route = createFileRoute('/_authed/app/billing')({
  component: BillingLayout,
})

function BillingInfoSkeleton() {
  return (
    <div className="space-y-6">
      <div>
        <Skeleton className="h-8 w-32 mb-2" />
        <Skeleton className="h-4 w-64" />
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        <Card className="p-6">
          <div className="space-y-4">
            <Skeleton className="h-6 w-32" />
            {[1, 2, 3, 4].map((i) => (
              <div key={i} className="flex justify-between">
                <Skeleton className="h-4 w-24" />
                <Skeleton className="h-4 w-20" />
              </div>
            ))}
          </div>
        </Card>

        <Card className="p-6">
          <div className="space-y-4">
            <Skeleton className="h-6 w-40" />
            {[1, 2].map((i) => (
              <div key={i} className="flex justify-between">
                <Skeleton className="h-4 w-24" />
                <Skeleton className="h-4 w-20" />
              </div>
            ))}
          </div>
        </Card>
      </div>

      <Card className="p-6">
        <Outlet />
      </Card>
    </div>
  )
}

function BillingInfoContent() {
  const { data } = useSuspenseQuery({
    queryKey: ['billing-info'],
    queryFn: () => getBillingInfo(),
  })

  if (!data.plan || !data.paymentMethod) {
    return (
      <div className="space-y-6">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Billing</h1>
          <p className="text-muted-foreground">
            No active subscription found. Please set up your billing information.
          </p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold tracking-tight">Billing</h1>
        <p className="text-muted-foreground">
          Manage your subscription and billing settings.
        </p>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        <Card className="p-6">
          <h2 className="text-lg font-semibold mb-4">Current Plan</h2>
          <div className="space-y-2">
            <div className="flex justify-between">
              <span className="text-muted-foreground">Plan</span>
              <span className="font-medium">{data.plan.name}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Billing Period</span>
              <span className="font-medium">{data.plan.billingPeriod}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Amount</span>
              <span className="font-medium">${data.plan.amount}/month</span>
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Next Payment</span>
              <span className="font-medium">{data.plan.nextPaymentDate || 'N/A'}</span>
            </div>
          </div>
        </Card>

        <Card className="p-6">
          <h2 className="text-lg font-semibold mb-4">Payment Method</h2>
          <div className="space-y-2">
            <div className="flex justify-between">
              <span className="text-muted-foreground">Card</span>
              <span className="font-medium">•••• {data.paymentMethod.cardLast4}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Expires</span>
              <span className="font-medium">{data.paymentMethod.expiryDate}</span>
            </div>
          </div>
        </Card>
      </div>

      <Card className="p-6">
        <Outlet />
      </Card>
    </div>
  )
}

function BillingLayout() {
  return (
    <Suspense fallback={<BillingInfoSkeleton />}>
      <BillingInfoContent />
    </Suspense>
  )
}
======= -server.ts ======= with the path ./src/routes/_authed/app/dashboard/-server.ts
import { createServerFn } from '@tanstack/react-start'
import { authMiddleware } from '~/middleware/authMiddleware'
import { z } from 'zod'

export interface DashboardStats {
  totalUsers: number
  activeUsers: number
  revenue: number
  activeProjects: number
  monthlyGrowth: {
    users: number
    active: number
    revenue: number
    projects: number
  }
}

export const getDashboardStats = createServerFn()
.middleware([authMiddleware]).handler(async ({ context }) => {
  // Log JWT token length for debugging
  console.log('JWT Token length:', context.accessToken.length)

  // Mock FastAPI response
  const mockStats: DashboardStats = {
    totalUsers: 1234,
    activeUsers: 891,
    revenue: 12345,
    activeProjects: 23,
    monthlyGrowth: {
      users: 12,
      active: 5,
      revenue: 8,
      projects: 2
    }
  }

  // Simulate network delay
  await new Promise(resolve => setTimeout(resolve, 500))

  return mockStats
})
======= index.tsx ======= with the path ./src/routes/_authed/app/dashboard/index.tsx
import { Suspense } from 'react'
import { createFileRoute } from '@tanstack/react-router'
import { useSuspenseQuery } from '@tanstack/react-query'
import { getDashboardStats } from './-server'
import type { DashboardStats } from './-server'

export const Route = createFileRoute('/_authed/app/dashboard/')({
  component: DashboardIndex,
})

function DashboardSkeleton() {
  return (
    <div className="space-y-4 animate-pulse">
      <div className="h-6 w-48 bg-gray-200 rounded"></div>
      <div className="h-4 w-96 bg-gray-200 rounded"></div>
      <div className="border rounded-lg p-4">
        <div className="h-4 w-32 bg-gray-200 rounded"></div>
      </div>
    </div>
  )
}

function DashboardContent() {
  const { data } = useSuspenseQuery<DashboardStats>({
    queryKey: ['dashboard-stats'],
    queryFn: () => getDashboardStats(),
  })

  return (
    <div className="space-y-4">
      <h2 className="text-lg font-semibold">Activity Overview</h2>
      <p className="text-muted-foreground">
        Recent activity and important updates shown below.
      </p>
      <div className="border rounded-lg p-4">
        <div className="space-y-2">
          <p className="text-sm">
            <span className="font-medium">Total Users Growth:</span> +{data.monthlyGrowth.users}%
          </p>
          <p className="text-sm">
            <span className="font-medium">Active Users Growth:</span> +{data.monthlyGrowth.active}%
          </p>
          <p className="text-sm">
            <span className="font-medium">Revenue Growth:</span> +{data.monthlyGrowth.revenue}%
          </p>
          <p className="text-sm">
            <span className="font-medium">Projects Growth:</span> +{data.monthlyGrowth.projects}
          </p>
        </div>
      </div>
    </div>
  )
}

function DashboardIndex() {
  return (
    <Suspense fallback={<DashboardSkeleton />}>
      <DashboardContent />
    </Suspense>
  )
}
======= route.tsx ======= with the path ./src/routes/_authed/app/dashboard/route.tsx
import { Suspense } from 'react'
import { Outlet, createFileRoute } from '@tanstack/react-router'
import { useSuspenseQuery } from '@tanstack/react-query'
import { Card } from '~/components/ui/card'
import { getDashboardStats } from './-server'
import type { DashboardStats } from './-server'

export const Route = createFileRoute('/_authed/app/dashboard')({
  component: DashboardLayout,
})

function StatsSkeleton() {
  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      {[1, 2, 3, 4].map((i) => (
        <Card key={i} className="p-4">
          <div className="space-y-3 animate-pulse">
            <div className="h-4 w-24 bg-gray-200 rounded"></div>
            <div className="h-8 w-20 bg-gray-200 rounded"></div>
            <div className="h-3 w-32 bg-gray-200 rounded"></div>
          </div>
        </Card>
      ))}
    </div>
  )
}

function StatsContent() {
  const { data } = useSuspenseQuery<DashboardStats>({
    queryKey: ['dashboard-stats'],
    queryFn: () => getDashboardStats(),
  })

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      <Card className="p-4">
        <h3 className="text-sm font-medium">Total Users</h3>
        <p className="text-2xl font-bold">{data.totalUsers.toLocaleString()}</p>
        <p className="text-xs text-muted-foreground">+{data.monthlyGrowth.users}% from last month</p>
      </Card>
      
      <Card className="p-4">
        <h3 className="text-sm font-medium">Active Users</h3>
        <p className="text-2xl font-bold">{data.activeUsers.toLocaleString()}</p>
        <p className="text-xs text-muted-foreground">+{data.monthlyGrowth.active}% from last month</p>
      </Card>
      
      <Card className="p-4">
        <h3 className="text-sm font-medium">Revenue</h3>
        <p className="text-2xl font-bold">${data.revenue.toLocaleString()}</p>
        <p className="text-xs text-muted-foreground">+{data.monthlyGrowth.revenue}% from last month</p>
      </Card>
      
      <Card className="p-4">
        <h3 className="text-sm font-medium">Active Projects</h3>
        <p className="text-2xl font-bold">{data.activeProjects}</p>
        <p className="text-xs text-muted-foreground">+{data.monthlyGrowth.projects} from last month</p>
      </Card>
    </div>
  )
}

function DashboardLayout() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold tracking-tight">Dashboard</h1>
        <p className="text-muted-foreground">
          View your analytics and key metrics.
        </p>
      </div>

      <Suspense fallback={<StatsSkeleton />}>
        <StatsContent />
      </Suspense>

      <Card className="p-6">
        <Outlet />
      </Card>
    </div>
  )
}
======= index.tsx ======= with the path ./src/routes/_authed/app/index.tsx
import { createFileRoute, Link } from '@tanstack/react-router'
import { Card } from '~/components/ui/card'

export const Route = createFileRoute('/_authed/app/')({
  component: AppIndex,
})

function AppIndex() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold tracking-tight">Welcome to Your Dashboard</h1>
        <p className="text-muted-foreground">
          Quick access to all your important features and information.
        </p>
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        <Card className="p-6 hover:bg-accent/50 transition-colors">
          <h2 className="text-lg font-semibold mb-2">Dashboard</h2>
          <p className="text-muted-foreground text-sm mb-4">
            View your analytics and key metrics
          </p>
          <Link to="/app/dashboard" className="text-sm text-primary hover:underline">
            View Dashboard →
          </Link>
        </Card>

        <Card className="p-6 hover:bg-accent/50 transition-colors">
          <h2 className="text-lg font-semibold mb-2">Settings</h2>
          <p className="text-muted-foreground text-sm mb-4">
            Manage your account settings and preferences
          </p>
          <Link to="/app/settings" className="text-sm text-primary hover:underline">
            View Settings →
          </Link>
        </Card>

        <Card className="p-6 hover:bg-accent/50 transition-colors">
          <h2 className="text-lg font-semibold mb-2">Billing</h2>
          <p className="text-muted-foreground text-sm mb-4">
            View your subscription and billing history
          </p>
          <Link to="/app/billing" className="text-sm text-primary hover:underline">
            View Billing →
          </Link>
        </Card>
      </div>
    </div>
  )
}

======= index.tsx ======= with the path ./src/routes/_authed/app/settings/index.tsx
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/_authed/app/settings/')({
  component: SettingsIndex,
})

function SettingsIndex() {
  return (
    <div className="space-y-4">
      <h2 className="text-lg font-semibold">Settings Overview</h2>
      <p className="text-muted-foreground">
        Select a category from the sidebar to manage your settings.
      </p>
      <div className="grid gap-4 md:grid-cols-2">
        <div className="border rounded-lg p-4">
          <h3 className="font-medium mb-2">Profile</h3>
          <p className="text-sm text-muted-foreground">
            Update your personal information and preferences
          </p>
        </div>
        <div className="border rounded-lg p-4">
          <h3 className="font-medium mb-2">Security</h3>
          <p className="text-sm text-muted-foreground">
            Manage your account security and authentication
          </p>
        </div>
        <div className="border rounded-lg p-4">
          <h3 className="font-medium mb-2">Notifications</h3>
          <p className="text-sm text-muted-foreground">
            Configure your notification preferences
          </p>
        </div>
        <div className="border rounded-lg p-4">
          <h3 className="font-medium mb-2">Connected Accounts</h3>
          <p className="text-sm text-muted-foreground">
            Manage your connected services and integrations
          </p>
        </div>
      </div>
    </div>
  )
}
======= notifications.tsx ======= with the path ./src/routes/_authed/app/settings/notifications.tsx
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/_authed/app/settings/notifications')({
  component: NotificationSettings,
})

function NotificationSettings() {
  return (
    <div className="space-y-4">
      <h2 className="text-lg font-semibold">Notification Settings</h2>
      <p className="text-muted-foreground">
        Manage your notification preferences and communication settings.
      </p>
      {/* Notification settings form would go here */}
    </div>
  )
}
======= profile.tsx ======= with the path ./src/routes/_authed/app/settings/profile.tsx
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/_authed/app/settings/profile')({
  component: ProfileSettings,
})

function ProfileSettings() {
  return (
    <div className="space-y-4">
      <h2 className="text-lg font-semibold">Profile Settings</h2>
      <p className="text-muted-foreground">
        Update your profile information and preferences.
      </p>
      {/* Profile settings form would go here */}
    </div>
  )
}
======= route.tsx ======= with the path ./src/routes/_authed/app/settings/route.tsx
import { Outlet, createFileRoute, Link } from '@tanstack/react-router'
import { Card } from '~/components/ui/card'

export const Route = createFileRoute('/_authed/app/settings')({
  component: SettingsLayout,
})

function SettingsLayout() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold tracking-tight">Settings</h1>
        <p className="text-muted-foreground">
          Manage your account settings and preferences.
        </p>
      </div>

      <div className="flex flex-col md:flex-row gap-8">
        <Card className="p-4 md:w-64 shrink-0">
          <nav className="space-y-2">
            <Link
              to="/app/settings/profile"
              className="block px-3 py-2 text-sm rounded-md hover:bg-accent"
              activeProps={{ className: 'bg-accent' }}
            >
              Profile
            </Link>
            <Link
              to="/app/settings/security"
              className="block px-3 py-2 text-sm rounded-md hover:bg-accent"
              activeProps={{ className: 'bg-accent' }}
            >
              Security
            </Link>
            <Link
              to="/app/settings/notifications"
              className="block px-3 py-2 text-sm rounded-md hover:bg-accent"
              activeProps={{ className: 'bg-accent' }}
            >
              Notifications
            </Link>
          </nav>
        </Card>

        <Card className="p-6 flex-1">
          <Outlet />
        </Card>
      </div>
    </div>
  )
}

======= security.tsx ======= with the path ./src/routes/_authed/app/settings/security.tsx
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/_authed/app/settings/security')({
  component: SecuritySettings,
})

function SecuritySettings() {
  return (
    <div className="space-y-4">
      <h2 className="text-lg font-semibold">Security Settings</h2>
      <p className="text-muted-foreground">
        Manage your account security and authentication settings.
      </p>
      {/* Security settings form would go here */}
    </div>
  )
}
======= index.tsx ======= with the path ./src/routes/_authed/app/test/index.tsx
import { useMutation } from '@tanstack/react-query'
import { useState } from 'react'
import { Card } from '~/components/ui/card'
import { Input } from '~/components/ui/input'
import { Button } from '~/components/ui/button'
import { useToast } from '~/components/ui/use-toast'
import { Label } from '~/components/ui/label'
import { Alert, AlertDescription } from '~/components/ui/alert'
import { spendCreditsFn } from '../../-server'
import { useServerFn } from '@tanstack/react-start'

export default function TestPage() {
  const [amount, setAmount] = useState<number>(1)
  const [action, setAction] = useState<string>('test_action')
  const { toast } = useToast()
  const spendCredits = useServerFn(spendCreditsFn)

  const spendCreditsMutation = useMutation({
    mutationFn: async ({ amount, action }: { amount: number; action: string }) => {
      const result = await spendCredits({ data: { amount, action } })
      if (result.error) {
        throw new Error(result.message)
      }
      return result.data!
    },
    onSuccess: (data) => {
      toast({
        title: 'Credits Spent Successfully',
        description: `Spent ${data.credits_spent} credits. Remaining balance: ${data.remaining_balance}`,
      })
    },
    onError: (error: Error) => {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive',
      })
    },
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    spendCreditsMutation.mutate({ amount, action })
  }

  return (
    <div className="container mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6">Test Credit Spend</h1>

      <Card className="p-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="amount">Amount of Credits</Label>
            <Input
              id="amount"
              type="number"
              min="1"
              value={amount}
              onChange={(e) => setAmount(parseInt(e.target.value))}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="action">Action</Label>
            <Input
              id="action"
              type="text"
              value={action}
              onChange={(e) => setAction(e.target.value)}
              placeholder="test_action"
            />
          </div>

          <Button
            type="submit"
            disabled={spendCreditsMutation.isPending}
            className="w-full"
          >
            {spendCreditsMutation.isPending ? 'Processing...' : 'Spend Credits'}
          </Button>
        </form>

        {spendCreditsMutation.isSuccess && (
          <Alert className="mt-6">
            <AlertDescription>
              <div className="space-y-2">
                <p>
                  <strong>Status:</strong> {spendCreditsMutation.data.status}
                </p>
                <p>
                  <strong>Credits Spent:</strong>{' '}
                  {spendCreditsMutation.data.credits_spent}
                </p>
                <p>
                  <strong>Remaining Balance:</strong>{' '}
                  {spendCreditsMutation.data.remaining_balance}
                </p>
                <p>
                  <strong>Transaction ID:</strong>{' '}
                  {spendCreditsMutation.data.transaction_id}
                </p>
                <p>
                  <strong>Timestamp:</strong>{' '}
                  {new Date(
                    spendCreditsMutation.data.timestamp
                  ).toLocaleString()}
                </p>
              </div>
            </AlertDescription>
          </Alert>
        )}
      </Card>
    </div>
  )
}
======= readme.md ======= with the path ./src/routes/_authed/readme.md
# Protected Routes Documentation

This directory contains all protected routes that require authentication. The authentication is handled through our AuthContext pattern.

## Authentication Flow

1. All routes under this directory are protected by the AuthContext in `_authed.tsx`
2. When accessing these routes:
   - AuthContext checks if user is authenticated
   - Shows loading spinner during check
   - Redirects to login if unauthenticated
   - Renders route content if authenticated

## Server Functions

All authentication-related server functions are in `-server.ts`:
- `checkAuthFn`: Verifies authentication status
- `loginFn`: Handles user login
- `signupFn`: Handles user registration
- `logoutFn`: Handles user logout
- `getCredits`: Example of a protected server function

## Usage

Protected routes automatically have access to the auth state through the `useAuth` hook:

```typescript
function ProtectedComponent() {
  const { user, loading, logout } = useAuth()

  if (loading) {
    return <LoadingSpinner />
  }

  return (
    <div>
      Welcome {user?.email}
      <button onClick={logout}>Logout</button>
    </div>
  )
}
```

## Important Notes

1. All Supabase operations happen server-side
2. Use the `useAuth` hook for auth state
3. Protected routes show loading states during auth checks
4. Auth state refreshes automatically on:
   - Tab focus
   - Network reconnection
======= _authed.tsx ======= with the path ./src/routes/_authed.tsx
import { Outlet, createFileRoute, redirect, useRouter } from '@tanstack/react-router'
import { ProtectedNav } from '~/components/ProtectedNav'
import { Footer } from '~/components/Footer'
import { useAuth } from '~/auth/AuthContext'
import { useEffect } from 'react'

export const Route = createFileRoute('/_authed')({
  component: AuthedLayout,
})

function AuthedLayout() {
  const { user, loading } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!loading && !user) {
      router.navigate({
        to: '/login',
        search: {
          redirect: router.state.location.pathname,
        },
        replace: true
      })
    }
  }, [user, loading, router])

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900"></div>
      </div>
    )
  }

  if (!user) {
    return null
  }

  return (
    <div className="min-h-screen flex flex-col">
      <ProtectedNav />
      <main className="flex-1 max-w-7xl w-full mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <Outlet />
      </main>
      <Footer />
    </div>
  )
}

======= route-a.tsx ======= with the path ./src/routes/_pathlessLayout/_nested-layout/route-a.tsx
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/_pathlessLayout/_nested-layout/route-a')(
  {
    component: LayoutAComponent,
  },
)

function LayoutAComponent() {
  return <div>I'm A!</div>
}

======= route-b.tsx ======= with the path ./src/routes/_pathlessLayout/_nested-layout/route-b.tsx
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/_pathlessLayout/_nested-layout/route-b')(
  {
    component: LayoutBComponent,
  },
)

function LayoutBComponent() {
  return <div>I'm B!</div>
}

======= _nested-layout.tsx ======= with the path ./src/routes/_pathlessLayout/_nested-layout.tsx
import { Link, Outlet, createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/_pathlessLayout/_nested-layout')({
  component: LayoutComponent,
})

function LayoutComponent() {
  return (
    <div>
      <div>I'm a nested layout</div>
      <div className="flex gap-2 border-b">
        <Link
          to="/route-a"
          activeProps={{
            className: 'font-bold',
          }}
        >
          Go to route A
        </Link>
        <Link
          to="/route-b"
          activeProps={{
            className: 'font-bold',
          }}
        >
          Go to route B
        </Link>
      </div>
      <div>
        <Outlet />
      </div>
    </div>
  )
}

======= _pathlessLayout.tsx ======= with the path ./src/routes/_pathlessLayout.tsx
import { Outlet, createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/_pathlessLayout')({
  component: LayoutComponent,
})

function LayoutComponent() {
  return (
    <div className="p-2">
      <div className="border-b">I'm a layout</div>
      <div>
        <Outlet />
      </div>
    </div>
  )
}

======= users.$id.ts ======= with the path ./src/routes/api/users.$id.ts
import { json } from '@tanstack/react-start'
import { createAPIFileRoute } from '@tanstack/react-start/api'
import type { User } from '../../utils/users'

export const APIRoute = createAPIFileRoute('/api/users/$id')({
  GET: async ({ request, params }) => {
    console.info(`Fetching users by id=${params.id}... @`, request.url)
    try {
      const res = await fetch(
        'https://jsonplaceholder.typicode.com/users/' + params.id,
      )
      if (!res.ok) {
        throw new Error('Failed to fetch user')
      }

      const user = (await res.json()) as User

      return json({
        id: user.id,
        name: user.name,
        email: user.email,
      })
    } catch (e) {
      console.error(e)
      return json({ error: 'User not found' }, { status: 404 })
    }
  },
})

======= users.ts ======= with the path ./src/routes/api/users.ts
import { json } from '@tanstack/react-start'
import { createAPIFileRoute } from '@tanstack/react-start/api'
import type { User } from '../../utils/users'

export const APIRoute = createAPIFileRoute('/api/users')({
  GET: async ({ request }) => {
    console.info('Fetching users... @', request.url)
    const res = await fetch('https://jsonplaceholder.typicode.com/users')
    if (!res.ok) {
      throw new Error('Failed to fetch users')
    }

    const data = (await res.json()) as Array<User>

    const list = data.slice(0, 10)

    return json(list.map((u) => ({ id: u.id, name: u.name, email: u.email })))
  },
})

======= deferred.tsx ======= with the path ./src/routes/deferred.tsx
import { Await, createFileRoute } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'
import { Suspense, useState } from 'react'

const personServerFn = createServerFn({ method: 'GET' })
  .validator((d: string) => d)
  .handler(({ data: name }) => {
    return { name, randomNumber: Math.floor(Math.random() * 100) }
  })

const slowServerFn = createServerFn({ method: 'GET' })
  .validator((d: string) => d)
  .handler(async ({ data: name }) => {
    await new Promise((r) => setTimeout(r, 1000))
    return { name, randomNumber: Math.floor(Math.random() * 100) }
  })

export const Route = createFileRoute('/deferred')({
  loader: async () => {
    return {
      deferredStuff: new Promise<string>((r) =>
        setTimeout(() => r('Hello deferred!'), 2000),
      ),
      deferredPerson: slowServerFn({ data: 'Tanner Linsley' }),
      person: await personServerFn({ data: 'John Doe' }),
    }
  },
  component: Deferred,
})

function Deferred() {
  const [count, setCount] = useState(0)
  const { deferredStuff, deferredPerson, person } = Route.useLoaderData()

  return (
    <div className="p-2">
      <div data-testid="regular-person">
        {person.name} - {person.randomNumber}
      </div>
      <Suspense fallback={<div>Loading person...</div>}>
        <Await
          promise={deferredPerson}
          children={(data) => (
            <div data-testid="deferred-person">
              {data.name} - {data.randomNumber}
            </div>
          )}
        />
      </Suspense>
      <Suspense fallback={<div>Loading stuff...</div>}>
        <Await
          promise={deferredStuff}
          children={(data) => <h3 data-testid="deferred-stuff">{data}</h3>}
        />
      </Suspense>
      <div>Count: {count}</div>
      <div>
        <button onClick={() => setCount(count + 1)}>Increment</button>
      </div>
    </div>
  )
}

======= index.tsx ======= with the path ./src/routes/index.tsx
import { createFileRoute, Link } from '@tanstack/react-router'
import { PublicNav } from '~/components/PublicNav'
import { Footer } from '~/components/Footer'

const scrollToSection = (sectionId: string) => {
  const element = document.getElementById(sectionId);
  if (element) {
    const headerOffset = 80;
    const elementPosition = element.getBoundingClientRect().top;
    const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
    
    window.scrollTo({
      top: offsetPosition,
      behavior: 'smooth'
    });
  }
};

export const Route = createFileRoute('/')({
  component: LandingPage
})

function LandingPage() {
  return (
    <div className="flex flex-col">
      <PublicNav />
      {/* Hero Section */}
      <section className="bg-white min-h-[calc(100vh-64px)] flex items-center">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 -mt-16">
          <div className="text-center">
            <h1 className="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl">
              <span className="block">Modern SaaS Template</span>
              <span className="block text-indigo-600">for Your Next Project</span>
            </h1>
            <p className="mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl">
              Start building your SaaS application with our production-ready template.
              Built with React, TanStack Router, and modern tools.
            </p>
            <div className="mt-5 max-w-md mx-auto sm:flex sm:justify-center md:mt-8">
              <div className="rounded-md shadow">
                <Link
                  to="/register"
                  className="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 md:py-4 md:text-lg md:px-10"
                >
                  Get started
                </Link>
              </div>
              <div className="mt-3 rounded-md shadow sm:mt-0 sm:ml-3">
                <button
                  onClick={() => scrollToSection('features')}
                  className="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-gray-50 md:py-4 md:text-lg md:px-10"
                >
                  Learn more
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-32 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h2 className="text-3xl font-extrabold text-gray-900 sm:text-4xl">
              Everything you need to build your SaaS
            </h2>
            <p className="mt-4 text-lg text-gray-500">
              All the features you need to move fast and focus on what matters.
            </p>
          </div>

          <div className="mt-20 grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
            {/* Feature 1 */}
            <div className="bg-white p-6 rounded-lg shadow">
              <h3 className="text-lg font-medium text-gray-900">Authentication Ready</h3>
              <p className="mt-2 text-base text-gray-500">
                Built-in authentication system with Supabase, including login, registration, and password reset.
              </p>
            </div>

            {/* Feature 2 */}
            <div className="bg-white p-6 rounded-lg shadow">
              <h3 className="text-lg font-medium text-gray-900">Modern Stack</h3>
              <p className="mt-2 text-base text-gray-500">
                Built with React, TanStack Router, and TypeScript for a modern development experience.
              </p>
            </div>

            {/* Feature 3 */}
            <div className="bg-white p-6 rounded-lg shadow">
              <h3 className="text-lg font-medium text-gray-900">Responsive Design</h3>
              <p className="mt-2 text-base text-gray-500">
                Beautiful, responsive UI components built with Tailwind CSS and Framer Motion.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Pricing Section */}
      <section id="pricing" className="py-32 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h2 className="text-3xl font-extrabold text-gray-900 sm:text-4xl">
              Simple, transparent pricing
            </h2>
            <p className="mt-4 text-lg text-gray-500">
              No hidden fees. Cancel anytime.
            </p>
          </div>

          <div className="mt-20 grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
            {/* Starter Plan */}
            <div className="bg-white p-8 border rounded-lg shadow-sm">
              <h3 className="text-xl font-semibold text-gray-900">Starter</h3>
              <p className="mt-4 text-sm text-gray-500">Perfect for getting started</p>
              <p className="mt-8">
                <span className="text-4xl font-extrabold text-gray-900">$9</span>
                <span className="text-base font-medium text-gray-500">/month</span>
              </p>
              <ul className="mt-8 space-y-4">
                <li className="flex items-center">
                  <span className="text-green-500">✓</span>
                  <span className="ml-3 text-sm text-gray-700">Up to 1,000 users</span>
                </li>
                <li className="flex items-center">
                  <span className="text-green-500">✓</span>
                  <span className="ml-3 text-sm text-gray-700">Basic analytics</span>
                </li>
                <li className="flex items-center">
                  <span className="text-green-500">✓</span>
                  <span className="ml-3 text-sm text-gray-700">24/7 support</span>
                </li>
              </ul>
              <Link
                to="/app/billing"
                className="mt-8 block w-full py-3 px-6 border border-transparent rounded-md text-center font-medium text-white bg-indigo-600 hover:bg-indigo-700"
              >
                Subscribe Now
              </Link>
            </div>

            {/* Pro Plan */}
            <div className="bg-white p-8 border rounded-lg shadow-sm border-indigo-600">
              <h3 className="text-xl font-semibold text-gray-900">Pro</h3>
              <p className="mt-4 text-sm text-gray-500">For growing businesses</p>
              <p className="mt-8">
                <span className="text-4xl font-extrabold text-gray-900">$29</span>
                <span className="text-base font-medium text-gray-500">/month</span>
              </p>
              <ul className="mt-8 space-y-4">
                <li className="flex items-center">
                  <span className="text-green-500">✓</span>
                  <span className="ml-3 text-sm text-gray-700">Up to 10,000 users</span>
                </li>
                <li className="flex items-center">
                  <span className="text-green-500">✓</span>
                  <span className="ml-3 text-sm text-gray-700">Advanced analytics</span>
                </li>
                <li className="flex items-center">
                  <span className="text-green-500">✓</span>
                  <span className="ml-3 text-sm text-gray-700">Priority support</span>
                </li>
              </ul>
              <Link
                to="/app/billing"
                className="mt-8 block w-full py-3 px-6 border border-transparent rounded-md text-center font-medium text-white bg-indigo-600 hover:bg-indigo-700"
              >
                Subscribe Now
              </Link>
            </div>

            {/* Enterprise Plan */}
            <div className="bg-white p-8 border rounded-lg shadow-sm">
              <h3 className="text-xl font-semibold text-gray-900">Enterprise</h3>
              <p className="mt-4 text-sm text-gray-500">For large organizations</p>
              <p className="mt-8">
                <span className="text-4xl font-extrabold text-gray-900">$99</span>
                <span className="text-base font-medium text-gray-500">/month</span>
              </p>
              <ul className="mt-8 space-y-4">
                <li className="flex items-center">
                  <span className="text-green-500">✓</span>
                  <span className="ml-3 text-sm text-gray-700">Unlimited users</span>
                </li>
                <li className="flex items-center">
                  <span className="text-green-500">✓</span>
                  <span className="ml-3 text-sm text-gray-700">Custom analytics</span>
                </li>
                <li className="flex items-center">
                  <span className="text-green-500">✓</span>
                  <span className="ml-3 text-sm text-gray-700">Dedicated support</span>
                </li>
              </ul>
              <Link
                to="/app/billing"
                className="mt-8 block w-full py-3 px-6 border border-transparent rounded-md text-center font-medium text-white bg-indigo-600 hover:bg-indigo-700"
              >
                Subscribe Now
              </Link>
            </div>
          </div>
        </div>
      </section>

      <Footer />
    </div>
  )
}

======= login.tsx ======= with the path ./src/routes/login.tsx
import { createFileRoute, useRouter } from '@tanstack/react-router'
import { useAuth } from '~/auth/AuthContext'
import { useEffect } from 'react'
import { useMutation } from '~/hooks/useMutation'
import { Button } from '~/components/ui/button'
import { Input } from '~/components/ui/input'
import { Card } from '~/components/ui/card'
import { loginFn } from './_authed/-server'
import { useToast } from '~/hooks/use-toast'

export const Route = createFileRoute('/login')({
  validateSearch: (search: Record<string, unknown>) => {
    return {
      redirect: search.redirect as string | undefined,
    }
  },
  beforeLoad: ({ navigate }) => {
    return null
  },
  component: LoginPage,
})

function LoginPage() {
  const router = useRouter()
  const { toast } = useToast()
  const { user, refreshAuth } = useAuth()

  useEffect(() => {
    if (user) {
      router.navigate({ to: '/app', replace: true })
    }
  }, [user, router])
  const loginMutation = useMutation({
    fn: loginFn,
    onSuccess: async ({ data: response }) => {
      if (!response.error) {
        await refreshAuth()
        toast({
          title: "Success",
          description: "Successfully logged in",
          variant: "default",
        })
        // Get the redirect URL from search params or default to '/_authed'
        const { redirect } = router.state.location.search
        router.navigate({
          to: redirect || '/alerts',
          replace: true // Replace the current entry in history to prevent back button issues
        })
      } else {
        toast({
          title: "Error",
          description: response.message || "An unexpected error occurred",
          variant: "destructive",
        })
      }
    }
  })

  return (
    <div className="min-h-screen flex items-center justify-center px-4">
      <Card className="w-full max-w-md p-6">
        <h1 className="text-2xl font-bold text-center mb-2">Welcome back</h1>
        <p className="text-muted-foreground text-center mb-6">Sign in to your account</p>

        <form 
          onSubmit={(e) => {
            e.preventDefault()
            const formData = new FormData(e.target as HTMLFormElement)
            loginMutation.mutate({
              data: {
                email: formData.get('email') as string,
                password: formData.get('password') as string,
              },
            })
          }}
          className="space-y-4"
        >
          <div>
            <Input
              name="email"
              type="email"
              placeholder="Email"
              required
              className="w-full"
            />
          </div>

          <div>
            <Input
              name="password"
              type="password"
              placeholder="Password"
              required
              className="w-full"
            />
          </div>


          <Button 
            type="submit" 
            className="w-full"
            disabled={loginMutation.status === 'pending'}
          >
            {loginMutation.status === 'pending' ? 'Signing in...' : 'Sign in'}
          </Button>
        </form>

        <div className="text-center mt-4">
          <span className="text-muted-foreground">Don't have an account? </span>
          <button
            onClick={() => router.navigate({ to: '/register' })}
            className="text-primary hover:underline"
            type="button"
          >
            Sign up
          </button>
        </div>
      </Card>
    </div>
  )
}

======= posts.$postId.tsx ======= with the path ./src/routes/posts.$postId.tsx
import { Link, createFileRoute } from '@tanstack/react-router'
import { fetchPost } from '../utils/posts'
import { NotFound } from '~/components/NotFound'
import { PostErrorComponent } from '~/components/PostError'

export const Route = createFileRoute('/posts/$postId')({
  loader: ({ params: { postId } }) => fetchPost({ data: postId }),
  errorComponent: PostErrorComponent,
  component: PostComponent,
  notFoundComponent: () => {
    return <NotFound>Post not found</NotFound>
  },
})

function PostComponent() {
  const post = Route.useLoaderData()

  return (
    <div className="space-y-2">
      <h4 className="text-xl font-bold underline">{post.title}</h4>
      <div className="text-sm">{post.body}</div>
      <Link
        to="/posts/$postId/deep"
        params={{
          postId: post.id,
        }}
        activeProps={{ className: 'text-black font-bold' }}
        className="block py-1 text-blue-800 hover:text-blue-600"
      >
        Deep View
      </Link>
    </div>
  )
}

======= posts.index.tsx ======= with the path ./src/routes/posts.index.tsx
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/posts/')({
  component: PostsIndexComponent,
})

function PostsIndexComponent() {
  return <div>Select a post.</div>
}

======= posts.route.tsx ======= with the path ./src/routes/posts.route.tsx
import { Link, Outlet, createFileRoute } from '@tanstack/react-router'
import { fetchPosts } from '../utils/posts'

export const Route = createFileRoute('/posts')({
  loader: async () => fetchPosts(),
  component: PostsLayoutComponent,
})

function PostsLayoutComponent() {
  const posts = Route.useLoaderData()

  return (
    <div className="p-2 flex gap-2">
      <ul className="list-disc pl-4">
        {[...posts, { id: 'i-do-not-exist', title: 'Non-existent Post' }].map(
          (post) => {
            return (
              <li key={post.id} className="whitespace-nowrap">
                <Link
                  to="/posts/$postId"
                  params={{
                    postId: post.id,
                  }}
                  className="block py-1 text-blue-800 hover:text-blue-600"
                  activeProps={{ className: 'text-black font-bold' }}
                >
                  <div>{post.title.substring(0, 20)}</div>
                </Link>
              </li>
            )
          },
        )}
      </ul>
      <hr />
      <Outlet />
    </div>
  )
}

======= posts_.$postId.deep.tsx ======= with the path ./src/routes/posts_.$postId.deep.tsx
import { Link, createFileRoute } from '@tanstack/react-router'
import { fetchPost } from '../utils/posts'
import { PostErrorComponent } from '~/components/PostError'

export const Route = createFileRoute('/posts_/$postId/deep')({
  loader: async ({ params: { postId } }) =>
    fetchPost({
      data: postId,
    }),
  errorComponent: PostErrorComponent,
  component: PostDeepComponent,
})

function PostDeepComponent() {
  const post = Route.useLoaderData()

  return (
    <div className="p-2 space-y-2">
      <Link
        to="/posts"
        className="block py-1 text-blue-800 hover:text-blue-600"
      >
        ← All Posts
      </Link>
      <h4 className="text-xl font-bold underline">{post.title}</h4>
      <div className="text-sm">{post.body}</div>
    </div>
  )
}

======= redirect.tsx ======= with the path ./src/routes/redirect.tsx
import { createFileRoute, redirect } from '@tanstack/react-router'

export const Route = createFileRoute('/redirect')({
  beforeLoad: async () => {
    throw redirect({
      to: '/posts',
    })
  },
})

======= register.tsx ======= with the path ./src/routes/register.tsx
import { createFileRoute, useRouter } from '@tanstack/react-router'
import { useAuth } from '~/auth/AuthContext'
import { useEffect } from 'react'
import { useMutation } from '~/hooks/useMutation'
import { Button } from '~/components/ui/button'
import { Input } from '~/components/ui/input'
import { Card } from '~/components/ui/card'
import { signupFn } from './_authed/-server'
import { useToast } from '~/hooks/use-toast'

type SignupRequest = {
  data: {
    email: string
    password: string
  }
}

type AuthResponse = {
  error: boolean
  message?: string
  data?: {
    user: { id: string; email: string | undefined; created_at: string } | null
    session: { access_token: string; expires_at: number | undefined; refresh_token: string } | null
  }
}

export const Route = createFileRoute('/register')({
  beforeLoad: () => {
    // Auth check will be handled in the component
    return null
  },
  component: RegisterPage,
})

function RegisterPage() {
  const router = useRouter()
  const { toast } = useToast()
  const { user } = useAuth()

  useEffect(() => {
    if (user) {
      router.navigate({ to: '/app', replace: true })
    }
  }, [user, router])
  
  const signupMutation = useMutation<SignupRequest, AuthResponse>({
    fn: signupFn,
    onSuccess: async ({ data: response }) => {
      if (!response.error) {
        toast({
          title: "Success",
          description: "Account created successfully. Please check your email to confirm your account.",
          variant: "default",
        })
        router.navigate({
          to: '/login',
          search: {
            redirect: undefined
          }
        })
      } else {
        toast({
          title: "Error",
          description: response.message || "An unexpected error occurred",
          variant: "destructive",
        })
      }
    }
  })

  return (
    <div className="min-h-screen flex items-center justify-center px-4">
      <Card className="w-full max-w-md p-6">
        <h1 className="text-2xl font-bold text-center mb-2">Create an account</h1>
        <p className="text-muted-foreground text-center mb-6">Sign up to get started</p>

        <form 
          onSubmit={(e) => {
            e.preventDefault()
            const formData = new FormData(e.target as HTMLFormElement)
            signupMutation.mutate({
              data: {
                email: formData.get('email') as string,
                password: formData.get('password') as string,
              },
            })
          }}
          className="space-y-4"
        >
          <div>
            <Input
              name="email"
              type="email"
              placeholder="Email"
              required
              className="w-full"
            />
          </div>

          <div>
            <Input
              name="password"
              type="password"
              placeholder="Password"
              required
              className="w-full"
            />
          </div>


          <Button 
            type="submit" 
            className="w-full"
            disabled={signupMutation.status === 'pending'}
          >
            {signupMutation.status === 'pending' ? 'Creating account...' : 'Sign up'}
          </Button>
        </form>

        <div className="text-center mt-4">
          <span className="text-muted-foreground">Already have an account? </span>
          <button
            onClick={() => router.navigate({
              to: '/login',
              search: {
                redirect: undefined
              }
            })}
            className="text-primary hover:underline"
            type="button"
          >
            Sign in
          </button>
        </div>
      </Card>
    </div>
  )
}

======= users.$userId.tsx ======= with the path ./src/routes/users.$userId.tsx
import { createFileRoute } from '@tanstack/react-router'
import type { User } from '~/utils/users'
import { DEPLOY_URL } from '~/utils/users'
import { NotFound } from '~/components/NotFound'
import { UserErrorComponent } from '~/components/UserError'

export const Route = createFileRoute('/users/$userId')({
  loader: async ({ params: { userId } }) => {
    try {
      const res = await fetch(DEPLOY_URL + '/api/users/' + userId)
      if (!res.ok) {
        throw new Error('Unexpected status code')
      }

      const data = (await res.json()) as User

      return data
    } catch {
      throw new Error('Failed to fetch user')
    }
  },
  errorComponent: UserErrorComponent,
  component: UserComponent,
  notFoundComponent: () => {
    return <NotFound>User not found</NotFound>
  },
})

function UserComponent() {
  const user = Route.useLoaderData()

  return (
    <div className="space-y-2">
      <h4 className="text-xl font-bold underline">{user.name}</h4>
      <div className="text-sm">{user.email}</div>
    </div>
  )
}

======= users.index.tsx ======= with the path ./src/routes/users.index.tsx
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/users/')({
  component: UsersIndexComponent,
})

function UsersIndexComponent() {
  return <div>Select a user.</div>
}

======= users.route.tsx ======= with the path ./src/routes/users.route.tsx
import { Link, Outlet, createFileRoute } from '@tanstack/react-router'
import { DEPLOY_URL } from '../utils/users'
import type { User } from '../utils/users'

export const Route = createFileRoute('/users')({
  loader: async () => {
    try {
      const res = await fetch(DEPLOY_URL + '/api/users')
      if (!res.ok) {
        throw new Error('Unexpected status code')
      }

      const data = (await res.json()) as Array<User>

      return data
    } catch {
      throw new Error('Failed to fetch users')
    }
  },
  component: UsersLayoutComponent,
})

function UsersLayoutComponent() {
  const users = Route.useLoaderData()

  return (
    <div className="p-2 flex gap-2">
      <ul className="list-disc pl-4">
        {[
          ...users,
          { id: 'i-do-not-exist', name: 'Non-existent User', email: '' },
        ].map((user) => {
          return (
            <li key={user.id} className="whitespace-nowrap">
              <Link
                to="/users/$userId"
                params={{
                  userId: String(user.id),
                }}
                className="block py-1 text-blue-800 hover:text-blue-600"
                activeProps={{ className: 'text-black font-bold' }}
              >
                <div>{user.name}</div>
              </Link>
            </li>
          )
        })}
      </ul>
      <hr />
      <Outlet />
    </div>
  )
}

======= ssr.tsx ======= with the path ./src/ssr.tsx
/// <reference types="vinxi/types/server" />
import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/react-start/server'
import { getRouterManifest } from '@tanstack/react-start/router-manifest'

import { createRouter } from './router'

export default createStartHandler({
  createRouter,
  getRouterManifest,
})(defaultStreamHandler)

======= app.css ======= with the path ./src/styles/app.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    color-scheme: light dark;
  }

  * {
    @apply border-gray-200 dark:border-gray-800;
  }

  html,
  body {
    @apply text-gray-900 bg-gray-50 dark:bg-gray-950 dark:text-gray-200;
  }

  .using-mouse * {
    outline: none !important;
  }
}

======= loggingMiddleware.tsx ======= with the path ./src/utils/loggingMiddleware.tsx
import { createMiddleware } from '@tanstack/react-start'

const preLogMiddleware = createMiddleware()
  .client(async (ctx) => {
    const clientTime = new Date()

    return ctx.next({
      context: {
        clientTime,
      },
      sendContext: {
        clientTime,
      },
    })
  })
  .server(async (ctx) => {
    const serverTime = new Date()

    return ctx.next({
      sendContext: {
        serverTime,
        durationToServer:
          serverTime.getTime() - ctx.context.clientTime.getTime(),
      },
    })
  })

export const logMiddleware = createMiddleware()
  .middleware([preLogMiddleware])
  .client(async (ctx) => {
    const res = await ctx.next()

    const now = new Date()
    console.log('Client Req/Res:', {
      duration: res.context.clientTime.getTime() - now.getTime(),
      durationToServer: res.context.durationToServer,
      durationFromServer: now.getTime() - res.context.serverTime.getTime(),
    })

    return res
  })

======= posts.tsx ======= with the path ./src/utils/posts.tsx
import { notFound } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'

export type PostType = {
  id: string
  title: string
  body: string
}

export const fetchPost = createServerFn({ method: 'GET' })
  .validator((d: string) => d)
  .handler(async ({ data }) => {
    console.info(`Fetching post with id ${data}...`)
    const res = await fetch(
      `https://jsonplaceholder.typicode.com/posts/${data}`,
    )
    if (!res.ok) {
      if (res.status === 404) {
        throw notFound()
      }

      throw new Error('Failed to fetch post')
    }

    const post = (await res.json()) as PostType

    return post
  })

export const fetchPosts = createServerFn({ method: 'GET' }).handler(
  async () => {
    console.info('Fetching posts...')
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    if (!res.ok) {
      throw new Error('Failed to fetch posts')
    }

    const posts = (await res.json()) as Array<PostType>

    return posts
  },
)

======= seo.ts ======= with the path ./src/utils/seo.ts
export const seo = ({
  title,
  description,
  keywords,
  image,
}: {
  title: string
  description?: string
  image?: string
  keywords?: string
}) => {
  const tags = [
    { title },
    { name: 'description', content: description },
    { name: 'keywords', content: keywords },
    { name: 'twitter:title', content: title },
    { name: 'twitter:description', content: description },
    { name: 'twitter:creator', content: '@tannerlinsley' },
    { name: 'twitter:site', content: '@tannerlinsley' },
    { name: 'og:type', content: 'website' },
    { name: 'og:title', content: title },
    { name: 'og:description', content: description },
    ...(image
      ? [
          { name: 'twitter:image', content: image },
          { name: 'twitter:card', content: 'summary_large_image' },
          { name: 'og:image', content: image },
        ]
      : []),
  ]

  return tags
}

======= supabase.ts ======= with the path ./src/utils/supabase.ts
import { createServerClient } from '@supabase/ssr'
import { parseCookies, setCookie } from '@tanstack/react-start/server'
import { SUPABASE_URL, SUPABASE_ANON_KEY, getSupabaseConfig } from './supabaseConfig'

// Create a singleton instance for server-side auth
export function getServerSupabase() {
  return createServerClient(
    SUPABASE_URL,
    SUPABASE_ANON_KEY,
    {
      cookies: {
        get(name: string) {
          const cookies = parseCookies()
          return cookies[name]
        },
        set(name: string, value: string, options: any) {
          setCookie(name, value, { ...getSupabaseConfig().cookieOptions, ...options })
        },
        remove(name: string, options: any) {
          setCookie(name, '', { ...getSupabaseConfig().cookieOptions, ...options, maxAge: 0 })
        }
      }
    }
  )
}

// Helper to check authentication and get JWT for FastAPI
export async function checkAuth() {
  const supabase = getServerSupabase()
  const { data: { user }, error: userError } = await supabase.auth.getUser()
  const { data: { session }, error: sessionError } = await supabase.auth.getSession()

  if (userError || !user || sessionError || !session) {
    throw new Error('Not authenticated')
  }

  return {
    user,
    session,
    // Make JWT available for FastAPI calls
    accessToken: session.access_token
  }
}

======= supabaseConfig.ts ======= with the path ./src/utils/supabaseConfig.ts
export const SUPABASE_URL = process.env.VITE_SUPABASE_URL
export const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY

console.log('Supabase URL:', SUPABASE_URL)

export const getSupabaseConfig = () => ({
  supabaseUrl: SUPABASE_URL,
  supabaseKey: SUPABASE_ANON_KEY,
  cookieOptions: {
    path: '/',
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'lax' as const,
    maxAge: 60 * 60 * 24 * 30, // 30 days
  }
})
======= users.tsx ======= with the path ./src/utils/users.tsx
export type User = {
  id: number
  name: string
  email: string
}

export const DEPLOY_URL = 'http://localhost:3000'

======= tailwind.config.mjs ======= with the path ./tailwind.config.mjs
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./src/**/*.{js,jsx,ts,tsx}'],
}

